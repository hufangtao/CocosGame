{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\dyGame\\component/assets\\scripts\\dyGame\\component\\PolygonHitTest.ts"],"names":[],"mappings":";;;;;AAAA,QAAQ;AACF,IAAA,kBAAmD,EAAjD,oBAAO,EAAE,sCAAgB,EAAE,cAAI,CAAmB;AAI1D;IAA4C,kCAAY;IAAxD;;IAqBA,CAAC;IApBG,+BAAM,GAAN;QACI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uCAAc,GAAd,UAAe,KAAK,EAAE,QAAQ;QAC1B,IAAI,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;QAC5D,IAAI,eAAe,EAAE;YACjB,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACvC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;YAC3C,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC;SACxE;aAAM;YACH,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5C;IACL,CAAC;IApBgB,cAAc;QAHlC,OAAO;QACP,gBAAgB,CAAC,EAAE,CAAC,eAAe,CAAC;QACpC,IAAI,CAAC,0BAA0B,CAAC;OACZ,cAAc,CAqBlC;IAAD,qBAAC;CArBD,AAqBC,CArB2C,EAAE,CAAC,SAAS,GAqBvD;kBArBoB,cAAc","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\dyGame\\component","sourcesContent":["// 不规则触摸\r\nconst { ccclass, requireComponent, menu } = cc._decorator;\r\n@ccclass\r\n@requireComponent(cc.PolygonCollider)\r\n@menu('Component/PolygonHitTest')\r\nexport default class PolygonHitTest extends cc.Component {\r\n    onLoad() {\r\n        this.node._oldHitTest = this.node._hitTest.bind(this.node);\r\n        this.node._hitTest = this.polygonHitTest.bind(this.node);\r\n    };\r\n    /**\r\n     * 不规则多边形触摸测试\r\n     * @param {触摸点} point \r\n     * @param {监听} listener \r\n     */\r\n    polygonHitTest(point, listener) {\r\n        var polygonCollider = this.getComponent(cc.PolygonCollider);\r\n        if (polygonCollider) {\r\n            point = this.convertToNodeSpace(point);\r\n            point.x -= this.getContentSize().width / 2;\r\n            point.y -= this.getContentSize().height / 2;\r\n            return cc.Intersection.pointInPolygon(point, polygonCollider.points);\r\n        } else {\r\n            return this._oldHitTest(point, listener);\r\n        }\r\n    }\r\n}\r\n"]}