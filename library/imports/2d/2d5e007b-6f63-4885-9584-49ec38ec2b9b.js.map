{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\dyGame/assets\\scripts\\dyGame\\DYLoader.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\dyGame","sourcesContent":["export default class DYLoader {\r\n    public static async loadRes(url, type) {\r\n        return new Promise((resolve, reject) => {\r\n            DYLoaderHelper.theInstance.loadRes(url, type, resolve);\r\n        })\r\n    }\r\n\r\n    public static async loadStaticRes(url, type) {\r\n        return new Promise((resolve, reject) => {\r\n            DYLoaderHelper.theInstance.loadStaticRes(url, type, resolve);\r\n        })\r\n    }\r\n\r\n    public static async preloadScene(sceneName) {\r\n        return new Promise((resolve, reject) => {\r\n            DYLoaderHelper.theInstance.preloadScene(sceneName, resolve);\r\n        })\r\n    }\r\n\r\n    public static releaseStaticRes(url) {\r\n        DYLoaderHelper.theInstance.releaseStaticRes(url);\r\n    }\r\n}\r\n\r\nclass DYLoaderHelper {\r\n    public static get theInstance(): DYLoaderHelper {\r\n        if (!DYLoaderHelper.mInstance) {\r\n            DYLoaderHelper.mInstance = new DYLoaderHelper();\r\n        }\r\n        return DYLoaderHelper.mInstance;\r\n    }\r\n\r\n    private static mInstance: DYLoaderHelper;\r\n    // Boot 时的预加载: \r\n    // 这里是DYGameH可处理的最早的时刻, 应该只处理最紧急的预加载, 如 Main页需要的资源等\r\n    preloadWhenBoot() {\r\n\r\n    }\r\n\r\n    // Main 时的预加载:\r\n    // 这里用户会选 选择新开始游戏, 此处需加载人物选择与引导相关的资源\r\n    preloadWhenMain() {\r\n\r\n    }\r\n\r\n    // StoryBegin 时的预加载:\r\n    // 这里用户会选 选择新开始游戏, 此处需加载人物选择与引导相关的资源\r\n    preloadWhenStoryBegin() {\r\n\r\n    }\r\n\r\n    // Home 时的预加载:\r\n    // 这里用户会选 选择新开始游戏, 此处需加载人物选择与引导相关的资源\r\n    preloadWhenHome() {\r\n\r\n    }\r\n\r\n    preloadScene(sceneName,completeCallback){\r\n        cc.director.preloadScene(sceneName,()=>{\r\n            completeCallback && completeCallback();\r\n        })\r\n    }\r\n\r\n    // 加载的资源及资源引用的其它资源在切换场景时自动删除\r\n    loadRes(url, type, completeCallback) {\r\n         cc.loader.loadRes(url,type, (err, res) => {\r\n            if (completeCallback) {\r\n                completeCallback(res);\r\n            }\r\n            if (!err) {\r\n                // 这样处理的原因是: \r\n                // 这是因为 loadRes(\"btn/btn1\", cc.SpriteFrame ...) 获取的是 SpriteFrame 资源，\r\n                // 而 releaseRes(\"btn/btn1\") 释放的是 Texture2D 资源本身，并没有释放 spriteFrame，\r\n                // 所以再次加载的时候，获取到了之前缓存的 spriteFrame，而它的贴图其实已经删除了。\r\n                // 问题的根本还是因为一个 url 可以对应不同 type 的多个资源。\r\n                // var deps = cc.loader.getDependsRecursively(res);\r\n                // // cc.loader.setAutoReleaseRecursively(deps, true);\r\n            }\r\n        });\r\n    }\r\n\r\n    // 加载的资源及资源引用的其它资源在切换场景时也不会被删除\r\n    loadStaticRes(url, type, completeCallback) {\r\n        cc.loader.loadRes(url, type, (err, res) => {\r\n            if (completeCallback) {\r\n                completeCallback(res);\r\n            }\r\n            if (!err) {\r\n                var deps = cc.loader.getDependsRecursively(res);\r\n                // cc.loader.setAutoReleaseRecursively(deps, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    // 立即释放资源（缓存引用和资源内容都被清理，需要等gc）\r\n    releaseStaticRes(url) {\r\n        var deps = cc.loader.getDependsRecursively(url);\r\n        cc.loader.release(deps);\r\n    }\r\n\r\n};"]}