{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\common\\config/assets\\scripts\\app\\common\\config\\ConfigEntry.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\common\\config","sourcesContent":["import ResLoader from \"../loader/Loader\";\r\nimport { ILoadedResourceMap } from \"../loader/LoadDefine\";\r\nimport { RESOURCE_CONFIG_PATH_ROOT } from \"../Defines\";\r\nimport * as ConfigVO from \"./vo/ConfigVO\";\r\nimport { ByteArray } from \"../net/NetByteArray\";\r\nimport { Play } from \"../../module/Modules\";\r\n\r\nconst ClazzMap = {\r\n};\r\n\r\nfunction loadJsons(dirName) {\r\n  return new Promise((resolve, reject) => {\r\n    cc.loader.loadResDir(dirName, (err, assets, urls) => {\r\n      for (let i = 0; i < assets.length; ++i) {\r\n        if (urls[i] === 'config/Map') {\r\n          let mapData = assets[i].json;\r\n          Play.LevelDatas = mapData;\r\n          continue;\r\n        }\r\n        let configName = urls[i].substring(dirName.length + 1)\r\n        let data = assets[i].json;\r\n        onConfigLoaded(configName, data);\r\n      }\r\n      resolve();\r\n    })\r\n  })\r\n}\r\n\r\nfunction loadJson(name: string): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    ResLoader.loadConfig(name, function (err, resource) {\r\n      if (err) {\r\n        cc.warn(`load config:${name} err:${err}`);\r\n        resolve(null);\r\n        return;\r\n      }\r\n      resolve(resource);\r\n    });\r\n  });\r\n}\r\n\r\nfunction loadZip(name: string): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    ResLoader.loadSingle(RESOURCE_CONFIG_PATH_ROOT + name, function (err, resource) {\r\n      if (err) {\r\n        cc.warn(`load zip:${name} err:${err}`);\r\n        resolve(null);\r\n        return;\r\n      }\r\n      resolve(resource);\r\n    });\r\n  });\r\n}\r\n\r\nfunction getConfigPath(name: string): string {\r\n  return RESOURCE_CONFIG_PATH_ROOT + name;\r\n}\r\n\r\nfunction onConfigLoaded(configName: string, data: any) {\r\n  const name = configName.replace(/^(?:Sys|Client)?(.*)$/, \"$1\");\r\n  if (ConfigVO[name]) {\r\n    const vo = ConfigVO[name];\r\n    if (vo.isInited) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  ConfigVO[name].setClass(ClazzMap[name]);\r\n  ConfigVO[name].initData(data);\r\n}\r\n\r\nfunction onZipLoaded(files: any) {\r\n  for (const fileName of Object.keys(files)) {\r\n    const data = files[fileName] as Uint8Array;\r\n    const bytes: ByteArray = new ByteArray(data);\r\n    const fileContent = bytes.readUTFBytes(bytes.bytesAvailable);\r\n    const confName = fileName.split(\".\")[0];\r\n    onConfigLoaded(confName, JSON.parse(fileContent));\r\n  }\r\n}\r\n\r\nexport async function loadAllConfig() {\r\n  // const serverListName: string = \"ServerList\";\r\n  // const serverList = await loadJson(serverListName);\r\n  // if (!serverList) {\r\n  //   return false;\r\n  // }\r\n  // onConfigLoaded(serverListName, serverList);\r\n  await loadJsons('config');\r\n  return true;\r\n\r\n  // 加载zip包\r\n\r\n  // return new Promise((resolve, reject) => {\r\n  //   cc.loader.loadRes(\"config/other\", (err, zipFile) => {\r\n  //     if (!zipFile) {\r\n  //       reject(false);\r\n  //     }\r\n  //     onZipLoaded(zipFile);\r\n  //     resolve(true);\r\n  //   });\r\n  // })\r\n  // const zipFile: JSZip = await loadZip(\"other\");\r\n}\r\n"]}