{"version":3,"sources":["Toast.ts"],"names":[],"mappings":";;;;;AAAA,gEAA2D;AAC3D,iDAA+C;AAEzC,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAmB;AAG5C;IAAmC,yBAAY;IAD/C;QAAA,qEAuCC;QAnCQ,aAAO,GAAa,IAAI,CAAC;QAEzB,mBAAa,GAAc,IAAI,CAAC;;IAiCzC,CAAC;IA/BQ,qBAAK,GAAZ;IACA,CAAC;IAEM,0BAAU,GAAjB,UAAkB,OAAe,EAAE,SAAS,EAAE,SAAS;QACrD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACpD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,EAAE,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAElF,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvC,IAAI,SAAS,KAAK,sBAAS,CAAC,KAAK,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACpD;aAAM;YACL,IAAI;YACJ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SAErD;QACD,SAAS,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAM,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtC,IAAM,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAM,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;YAC1B,qBAAW,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,IAAM,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAEM,yBAAS,GAAhB;IACA,CAAC;IAlCD;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;0CACa;IAEhC;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;gDACmB;IALpB,KAAK;QADzB,OAAO;OACa,KAAK,CAsCzB;IAAD,YAAC;CAtCD,AAsCC,CAtCkC,EAAE,CAAC,SAAS,GAsC9C;kBAtCoB,KAAK","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\component\\prefab","sourcesContent":["import GamePersist from \"../../common/persist/GamePersist\";\r\nimport { ColorType } from \"../game/PlayDefine\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Toast extends cc.Component {\r\n\r\n  @property(cc.Label)\r\n  public textMsg: cc.Label = null;\r\n  @property(cc.Sprite)\r\n  public imgBackground: cc.Sprite = null;\r\n\r\n  public start() {\r\n  }\r\n\r\n  public setMessage(message: string, colorType, delayTime) {\r\n    this.textMsg.string = message;\r\n    this.textMsg['_updateRenderData'](true);\r\n    const textSize = this.textMsg.node.getContentSize();\r\n    this.imgBackground.node.setContentSize(textSize.width + 90, textSize.height + 70);\r\n\r\n    this.node.opacity = 255;\r\n    this.node.position = new cc.Vec2(0, 0);\r\n\r\n    if (colorType === ColorType.Green) {\r\n      this.textMsg.node.color = new cc.Color(46, 99, 25);\r\n    } else {\r\n      // çº¢\r\n      this.textMsg.node.color = new cc.Color(173, 53, 53);\r\n\r\n    }\r\n    delayTime = (delayTime ? delayTime : 1);\r\n    const delay = cc.delayTime(delayTime);\r\n    const action = cc.spawn([cc.moveBy(1.3, cc.v2(0, 70)), cc.fadeTo(1.3, 0)]);\r\n    const recycle = cc.callFunc(function () {\r\n      GamePersist.ToastPool.put(this.node);\r\n    }, this);\r\n    const seqActions = cc.sequence([delay, action, recycle]);\r\n    this.node.runAction(seqActions);\r\n  }\r\n\r\n  public onDestroy() {\r\n  }\r\n}\r\n"]}