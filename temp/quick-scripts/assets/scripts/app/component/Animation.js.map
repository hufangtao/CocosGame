{"version":3,"sources":["Animation.ts"],"names":[],"mappings":";;;;;AACA,uDAAyD;AACzD,kDAAgD;AAE1C,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAE1C;IAAuC,6BAAY;IAAnD;;IAoJA,CAAC;kBApJoB,SAAS;IAIR,sBAAY,GAAhC,UAAiC,MAAc,EAAE,WAAuB;QAAvB,4BAAA,EAAA,eAAuB;;;;gBAChE,CAAC,GAAG,IAAI,OAAO,CAAY,UAAC,OAAO,EAAE,MAAM;oBAC/C,IAAM,WAAW,GAA0B,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBAC1E,IAAI,CAAC,WAAW,EAAE;wBAChB,EAAE,CAAC,IAAI,CAAC,oBAAkB,MAAM,sBAAmB,CAAC,CAAC;wBACrD,OAAO,CAAC,IAAI,CAAC,CAAC;wBACd,OAAO;qBACR;oBACD,gCAAgC;oBAChC,IAAM,OAAO,GAAG,UAAU,CAAC;wBACzB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChB,CAAC,EAAE,WAAW,GAAG,IAAI,CAAC,CAAC;oBACvB,IAAM,aAAa,GAAG,WAAS,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC;oBACjE,gBAAS,CAAC,eAAe,CAAC,aAAa,EAAE,UAAS,GAAG,EAAE,KAAqB;wBAC1E,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtB,IAAI,CAAC,GAAG,EAAE;4BACR,IAAM,QAAQ,GAAY,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;4BACxC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;4BACpC,QAAQ,CAAC,YAAY,CAAC,WAAS,CAAC,CAAC;4BACjC,IAAM,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;4BAEhD,IAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC;4BACtC,IAAM,mBAAmB,GAAG,WAAW,CAAC,MAAM,CAAC;4BAC/C,IAAM,kBAAkB,GAAG,WAAW,CAAC,KAAK,CAAC;4BAE7C,IAAM,SAAS,GAAc,QAAQ,CAAC,YAAY,CAAC,WAAS,CAAC,CAAC;4BAC9D,IAAM,WAAW,GAAiB,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;4BACtE,IAAM,MAAM,GAAqB,EAAE,CAAC;4BACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,mBAAmB,EAAE,CAAC,EAAE,EAAE;gCAC7C,IAAM,SAAS,GAAG,WAAS,CAAC,sBAAsB,GAAG,aAAa,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACnF,IAAM,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gCAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;6BACpB;4BACD,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BAC/B,IAAM,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;4BACjE,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;4BAC1B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;4BACjC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;4BAE1B,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;4BACzE,SAAS,CAAC,IAAI,EAAE,CAAC,CAAG,2DAA2D;4BAC/E,OAAO,CAAC,SAAS,CAAC,CAAC;yBACpB;6BAAM;4BACL,EAAE,CAAC,IAAI,CAAC,oBAAkB,MAAM,aAAQ,GAAK,CAAC,CAAC;4BAC/C,OAAO,CAAC,IAAI,CAAC,CAAC;yBACf;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,sBAAO,CAAC,EAAC;;;KACV;IAQM,6BAAS,GAAhB;QACE;;;;;;;UAOE;IACJ,CAAC;IAEM,0BAAM,GAAb;QACE,2DAA2D;QAC3D,KAAK;QACL,gEAAgE;QAChE,gEAAgE;QAChE,qEAAqE;QACrE,oEAAoE;QACpE,iEAAiE;QACjE,kEAAkE;QAClE,KAAK;QACL,4EAA4E;QAC5E,0BAA0B;QAC1B,gCAAgC;QAChC,kDAAkD;QAClD,6CAA6C;QAC7C,aAAa;QACb,kDAAkD;QAClD,mDAAmD;QACnD,MAAM;QACN,IAAI;IACN,CAAC;IAEM,wBAAI,GAAX;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACxD,IAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,CAAC,cAAc,EAAE;YACpB,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;gBACxB,cAAc,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC3C,cAAc,CAAC,WAAW,GAAG,QAAQ,CAAC;aACvC;iBAAM;gBACL,cAAc,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC3C,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;aAC7C;SACF;IACH,CAAC;IAEM,2BAAO,GAAd;QACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAEM,yBAAK,GAAZ;IACA,CAAC;IAEM,wBAAI,GAAX;QACE,kDAAkD;QAClD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,sBAAW,kCAAW;aAAtB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAEM,0BAAM,GAAb,UAAc,IAAY,EAAE,UAAkB,EAAE,SAAiB;QAC/D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEO,mCAAe,GAAvB;QACE,mDAAmD;IACrD,CAAC;IACO,mCAAe,GAAvB;QACE,mDAAmD;IACrD,CAAC;IACO,wCAAoB,GAA5B;QACE,wDAAwD;IAC1D,CAAC;IACO,uCAAmB,GAA3B;QACE,uDAAuD;IACzD,CAAC;IACO,oCAAgB,GAAxB;QACE,oDAAoD;IACtD,CAAC;IACO,qCAAiB,GAAzB;QACE,qDAAqD;IACvD,CAAC;IAlJa,wBAAc,GAAW,WAAW,CAAC;IACrC,gCAAsB,GAAW,OAAO,CAAC;IAFpC,SAAS;QAD7B,OAAO;OACa,SAAS,CAoJ7B;IAAD,gBAAC;;CApJD,AAoJC,CApJsC,EAAE,CAAC,SAAS,GAoJlD;kBApJoB,SAAS","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\component","sourcesContent":["import { IAnimation } from \"../common/Misc\";\r\nimport * as ConfigVO from \"../common/config/vo/ConfigVO\";\r\nimport ResLoader from \"../common/loader/Loader\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n@ccclass\r\nexport default class Animation extends cc.Component implements IAnimation {\r\n  public static ANIMATION_PATH: string = \"res/anim/\";\r\n  public static ANIMATION_FRAME_PREFIX: string = \"anim-\";\r\n\r\n  public static async NewAnimation(animId: number, loadTimeout: number = 5): Promise<Animation> {\r\n    const p = new Promise<Animation>((resolve, reject) => {\r\n      const animationVo: ConfigVO.IAnimationVO = ConfigVO.Animation.get(animId);\r\n      if (!animationVo) {\r\n        cc.warn(`load animation:${animId} config not exist`);\r\n        resolve(null);\r\n        return;\r\n      }\r\n      // 设定加载超时 如果在指定时间内不能加载完成 则返回null\r\n      const timerId = setTimeout(() => {\r\n        resolve(null);\r\n      }, loadTimeout * 1000);\r\n      const animationPath = Animation.ANIMATION_PATH + animationVo.res;\r\n      ResLoader.loadSpriteAtlas(animationPath, function(err, atlas: cc.SpriteAtlas) {\r\n        clearTimeout(timerId);\r\n        if (!err) {\r\n          const animNode: cc.Node = new cc.Node();\r\n          animNode.addComponent(cc.Animation);\r\n          animNode.addComponent(Animation);\r\n          const sprite = animNode.addComponent(cc.Sprite);\r\n\r\n          const animationName = animationVo.res;\r\n          const animationFrameCount = animationVo.frames;\r\n          const animationPlayTimes = animationVo.times;\r\n\r\n          const animation: Animation = animNode.getComponent(Animation);\r\n          const ccAnimation: cc.Animation = animNode.getComponent(cc.Animation);\r\n          const frames: cc.SpriteFrame[] = [];\r\n          for (let i = 0;  i < animationFrameCount; i++) {\r\n            const frameName = Animation.ANIMATION_FRAME_PREFIX + animationName + \"-\" + (i + 1);\r\n            const frame = atlas.getSpriteFrame(frameName);\r\n            frames.push(frame);\r\n          }\r\n          sprite.spriteFrame = frames[0];\r\n          const clip = cc.AnimationClip.createWithSpriteFrames(frames, 10);\r\n          clip.name = animationName;\r\n          clip.wrapMode = cc.WrapMode.Loop;\r\n          ccAnimation.addClip(clip);\r\n\r\n          animation.config(animationName, animationFrameCount, animationPlayTimes);\r\n          animation.init();   // xlchen add 将本应该在onLoad中的代码移到init中，原因是onLoad有时不会被调，还未查到原因\r\n          resolve(animation);\r\n        } else {\r\n          cc.warn(`load animation:${animId} err:${err}`);\r\n          resolve(null);\r\n        }\r\n      });\r\n    });\r\n    return p;\r\n  }\r\n\r\n\r\n  private ccAnimation: cc.Animation;\r\n  private animName: string;\r\n  private frameCount: number;\r\n  private playTimes: number;\r\n\r\n  public onDestroy() {\r\n    /*\r\n    this.ccAnimation.off(\"play\",      this.onAnimationPlay, this);\r\n    this.ccAnimation.off(\"stop\",      this.onAnimationStop, this);\r\n    this.ccAnimation.off(\"lastframe\", this.onAnimationLastFrame, this);\r\n    this.ccAnimation.off(\"finished\",  this.onAnimationFinished, this);\r\n    this.ccAnimation.off(\"pause\",     this.onAnimationPause, this);\r\n    this.ccAnimation.off(\"resume\",    this.onAnimationResume, this);\r\n    */\r\n  }\r\n\r\n  public onLoad() {\r\n    // this.ccAnimation = this.node.getComponent(cc.Animation);\r\n    // /*\r\n    // this.ccAnimation.on(\"play\",      this.onAnimationPlay, this);\r\n    // this.ccAnimation.on(\"stop\",      this.onAnimationStop, this);\r\n    // this.ccAnimation.on(\"lastframe\", this.onAnimationLastFrame, this);\r\n    // this.ccAnimation.on(\"finished\",  this.onAnimationFinished, this);\r\n    // this.ccAnimation.on(\"pause\",     this.onAnimationPause, this);\r\n    // this.ccAnimation.on(\"resume\",    this.onAnimationResume, this);\r\n    // */\r\n    // const animationState = this.ccAnimation.getAnimationState(this.animName);\r\n    // if (!!animationState) {\r\n    //   if (this.playTimes === 0) {\r\n    //     animationState.wrapMode = cc.WrapMode.Loop;\r\n    //     animationState.repeatCount = Infinity;\r\n    //   } else {\r\n    //     animationState.wrapMode = cc.WrapMode.Loop;\r\n    //     animationState.repeatCount = this.playTimes;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  public init() {\r\n    this.ccAnimation = this.node.getComponent(cc.Animation);\r\n    const animationState = this.ccAnimation.getAnimationState(this.animName);\r\n    if (!!animationState) {\r\n      if (this.playTimes === 0) {\r\n        animationState.wrapMode = cc.WrapMode.Loop;\r\n        animationState.repeatCount = Infinity;\r\n      } else {\r\n        animationState.wrapMode = cc.WrapMode.Loop;\r\n        animationState.repeatCount = this.playTimes;\r\n      }\r\n    }\r\n  }\r\n\r\n  public dispose() {\r\n    this.node.destroy();\r\n  }\r\n\r\n  public start() {\r\n  }\r\n\r\n  public play() {\r\n    // //console.log(\"play animation\", this.animName);\r\n    this.ccAnimation.play(this.animName);\r\n  }\r\n\r\n  public get CCAnimation(): cc.Animation {\r\n    return this.ccAnimation;\r\n  }\r\n\r\n  public config(name: string, frameCount: number, playTimes: number) {\r\n    this.animName = name;\r\n    this.frameCount = frameCount;\r\n    this.playTimes = playTimes;\r\n  }\r\n\r\n  private onAnimationPlay() {\r\n    //console.log(\"#### animation => onAnimationPlay\");\r\n  }\r\n  private onAnimationStop() {\r\n    //console.log(\"#### animation => onAnimationStop\");\r\n  }\r\n  private onAnimationLastFrame() {\r\n    //console.log(\"#### animation => onAnimationLastFrame\");\r\n  }\r\n  private onAnimationFinished() {\r\n    //console.log(\"#### animation => onAnimationFinished\");\r\n  }\r\n  private onAnimationPause() {\r\n    //console.log(\"#### animation => onAnimationPause\");\r\n  }\r\n  private onAnimationResume() {\r\n    //console.log(\"#### animation => onAnimationResume\");\r\n  }\r\n}\r\n"]}