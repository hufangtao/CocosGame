{"version":3,"sources":["Board.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\component\\game\\pvp","sourcesContent":["import { TILE_TYPE, GRID_TYPE, TRANSPORT_TYPE, GAME_MODEL, PVP_FRUIT_COLOR_CNT, MAX_MATCH } from \"../PlayDefine\";\r\nimport { Play } from \"../../../module/Modules\";\r\nimport * as Algorithm from \"../Algorithm\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Board extends cc.Component {\r\n    @property(cc.Node)\r\n    nodBoard: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    panelGrid: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    pfbTileBg: cc.Prefab = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    spfTileBgWhite: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    spfTileBgBlack: cc.SpriteFrame = null;\r\n\r\n    layerGame;\r\n\r\n    onLoad() {\r\n    }\r\n\r\n    // 初始化地图\r\n    public initMap(layerGame) {\r\n        this.layerGame = layerGame;\r\n        this.layerGame.panelHeader.pvpTeach = this.layerGame.pvpTeach;\r\n        this.layerGame.panelHeader.pvpAi = this.layerGame.pvpAi;\r\n\r\n        this.layerGame.hadRemind = false;\r\n\r\n        this.layerGame.tiles = [];\r\n\r\n        let levelData = Play.LevelDatas['level_0'];\r\n        Play.DataPvp.levelData = levelData;\r\n\r\n        if (!Play.LevelDatas || !levelData || !levelData.grid) {\r\n            return;\r\n        }\r\n\r\n        for (let x = 0; x < 8; ++x) {\r\n            Play.DataPvp.grid[x] = [];\r\n            for (let y = 0; y < 9; ++y) {\r\n                Play.DataPvp.grid[x][y] = GRID_TYPE.TILE;\r\n            }\r\n        }\r\n\r\n        for (var x = 0; x < Play.DataPvp.grid.length; ++x) {\r\n            this.layerGame.tiles[x] = [];\r\n            for (var y = 0; y < Play.DataPvp.grid[x].length; ++y) {\r\n                this.layerGame.tiles[x][y] = null;\r\n            }\r\n        }\r\n\r\n        // 生成初始方块\r\n        for (var x = 0; x < Play.DataPvp.grid.length; ++x) {\r\n            for (var y = 0; y < Play.DataPvp.grid[x].length; ++y) {\r\n                if (Play.DataPvp.grid[x][y] == 0) {\r\n                    continue;\r\n                }\r\n                var count = 0;\r\n                var randomNum = 0;\r\n                while (true) {\r\n                    if (count >= 100000) {\r\n                        // console.log('陷入死循环');\r\n                        return\r\n                    }\r\n                    count++;\r\n                    var arr = new Array();\r\n                    var scanArr = new Array();\r\n                    // randomNum = Math.floor(Math.random() * Play.DataPlay.colorNum) + 1;\r\n                    randomNum = this.layerGame.getBlockColor(x, y);\r\n                    // randomNum = Math.floor(Math.random() * PVP_FRUIT_COLOR_CNT) + 1;\r\n\r\n                    Algorithm.scanAround(x, y, -1, -1, randomNum, arr, scanArr, this.layerGame.tiles, false);\r\n                    if (arr.length < MAX_MATCH) {\r\n                        this.layerGame.spawnBlock(x, y, randomNum, null, false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 生成四个宠物\r\n        this.layerGame.spawnPet(2, 2, false);\r\n        this.layerGame.spawnPet(2, 5, false);\r\n        this.layerGame.spawnPet(5, 2, false);\r\n        this.layerGame.spawnPet(5, 5, false);\r\n\r\n\r\n        if (this.layerGame.pvpTeach) {\r\n            this.initBlock();\r\n        }\r\n\r\n        this.layerGame.moveAllTileDown();\r\n        this.initTileBg();\r\n    }\r\n\r\n    // 初始格子背景\r\n    private initTileBg() {\r\n        this.layerGame.tileBgs = [];\r\n        for (let x = 0; x < Play.DataPvp.grid.length; ++x) {\r\n            this.layerGame.tileBgs[x] = [];\r\n            for (let y = 0; y < Play.DataPvp.grid[0].length; ++y) {\r\n                if (Play.DataPvp.grid[x][y] == GRID_TYPE.EMPTY) {\r\n                    continue\r\n                }\r\n                let nodTileBg = cc.instantiate(Play.DataPvp.pfbTileBg);\r\n                this.layerGame.tileBgs[x][y] = nodTileBg;\r\n                nodTileBg.parent = this.panelGrid;\r\n                nodTileBg.setPosition(80 * (x - 4) + 80 / 2,\r\n                    80 * y + 80 / 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    initBlock() {\r\n        let block = Play.DataPvp.levelData.tile.block || [];\r\n        for (let i = 0; i < block.length; ++i) {\r\n            let x = Math.floor(block[i].index / (this.layerGame.tiles.length + 1));\r\n            let y = block[i].index % this.layerGame.tiles[0].length;\r\n            this.layerGame.spawnBlock(x, y, block[i].type, null, false);\r\n        }\r\n    }\r\n}\r\n"]}