{"version":3,"sources":["DataPve.ts"],"names":[],"mappings":";;;;;AAAA,4CAAgL;AAEhL,IAAK,SAGJ;AAHD,WAAK,SAAS;IACV,yCAAI,CAAA;IACJ,yCAAI,CAAA;AACR,CAAC,EAHI,SAAS,KAAT,SAAS,QAGb;AACD;IAAA;QACW,SAAI,GAAG,IAAI,CAAC;QACZ,cAAS,GAAG,IAAI,CAAC;QAChB,WAAM,GAAW,CAAC,CAAC,CAAC,OAAO;QAC3B,gBAAW,GAAW,CAAC,CAAC,CAAC,SAAS;QAClC,gBAAW,GAAW,CAAC,CAAC,CAAC,SAAS;QAElC,mBAAc,GAAW,CAAC,CAAC,CAAA,WAAW;QAEtC,cAAS,GAAW,CAAC,CAAC,CAAC,YAAY;QACnC,cAAS,GAAW,CAAC,CAAC,CAAC,YAAY;QAEnC,gBAAW,GAAG,IAAI,CAAC,CAAC,OAAO;QAC3B,eAAU,GAAG,IAAI,CAAC,CAAC,SAAS;QAC5B,gBAAW,GAAG,EAAE,CAAC,CAAC,SAAS;QAC3B,WAAM,GAAW,CAAC,CAAC,CAAC,OAAO;QAE3B,mBAAc,GAAG,EAAE,CAAC,CAAA,MAAM;QAE3B,SAAI,GAAG,EAAE,CAAC;QAEV,eAAU,GAAG,KAAK,CAAC;QAEnB,gBAAW,GAAG,KAAK,CAAC;QAEpB,aAAQ,GAAc,IAAI,CAAC;QAC3B,YAAO,GAAc,IAAI,CAAC;QAC1B,aAAQ,GAAc,IAAI,CAAC;QAC3B,YAAO,GAAc,IAAI,CAAC;QAC1B,gBAAW,GAAc,IAAI,CAAC;QAC9B,YAAO,GAAc,IAAI,CAAC;QAC1B,iBAAY,GAAc,IAAI,CAAC;QAC/B,iBAAY,GAAc,IAAI,CAAC;QAC/B,YAAO,GAAc,IAAI,CAAC;QAC1B,iBAAY,GAAc,IAAI,CAAC;QAC/B,cAAS,GAAc,IAAI,CAAC;QAEnC,aAAQ,GAAG,CAAC,CAAC,CAAA,OAAO;QACpB,cAAS,GAAG,SAAS,CAAC,IAAI,CAAC,CAAA,SAAS;QAEpC,aAAQ,GAAG,CAAC,CAAC,CAAA,OAAO;QAEpB,iBAAY,GAAG,CAAC,CAAC,CAAC,UAAU;QAC5B,iBAAY,GAAG,CAAC,CAAC;QA6RjB,oEAAoE;QAC7D,iBAAY,GAAW,CAAC,CAAC;QACzB,iBAAY,GAAW,CAAC,CAAC;QACzB,iBAAY,GAAa,EAAE,CAAC,CAAA,OAAO;QACnC,sBAAiB,GAAa,EAAE,CAAC,CAAA,OAAO;QACxC,cAAS,GAAY,IAAI,CAAC;QAE1B,SAAI,GAAW,CAAC,CAAC;QAEjB,mBAAc,GAAa,EAAE,CAAC,CAAA,SAAS;QACvC,gBAAW,GAAW,CAAC,CAAC,CAAA,UAAU;QAGlC,oBAAe,GAAa,EAAE,CAAC,CAAA,SAAS;QACxC,eAAU,GAAa,EAAE,CAAC,CAAA,SAAS;QACnC,qBAAgB,GAAa,EAAE,CAAC,CAAA,SAAS;QACzC,eAAU,GAAa,EAAE,CAAC,CAAA,QAAQ;QAClC,oBAAe,GAAa,EAAE,CAAC,CAAA,SAAS;QA4J/C,gBAAW,GAAG,EAAE,CAAC;QACjB,eAAU,GAAG,EAAE,CAAC;QAChB,mBAAc,GAAG,EAAE,CAAC;IAqExB,CAAC;IA/gBG,YAAY;IACZ,4BAAU,GAAV;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChD,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,sBAAS,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;oBAClH,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,eAAe;IACf,gCAAc,GAAd,UAAe,KAAK,EAAE,SAAS;QAC3B,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;gBAC5G,SAAS,GAAG,KAAK,CAAC;aACrB;SACJ;QACD,IAAI,SAAS,EAAE;YACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,QAAQ,EAAE;oBACtE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,2BAAc,CAAC,MAAM,CAAC;oBACjE,IAAI,IAAI,GAAG;wBACP,KAAK,EAAE,SAAS,GAAG,CAAC;wBACpB,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;qBAC1C,CAAC;oBACF,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;oBACrC,OAAO;iBACV;aACJ;SAEJ;IACL,CAAC;IAED,OAAO;IACP,8BAAY,GAAZ,UAAa,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,OAAQ;QAC1C,UAAU;QACV,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBAClC,KAAK,GAAG,CAAC,CAAC;oBACV,MAAM,GAAG,KAAK,CAAC;oBACf,SAAS,IAAI,CAAC,CAAC;oBACf,MAAM;iBACT;qBAAM;oBACH,SAAS,EAAE,CAAC;iBACf;aACJ;YACD,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM;aACT;SACJ;QAED,aAAa;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,QAAQ,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAChD,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBAC1C,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;oBACtF,SAAS;iBACZ;gBACD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBAC5G,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;oBACjD,IAAI,KAAK,IAAI,CAAC,EAAE;wBACZ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAA;wBACpC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;wBACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;qBACnB;yBAAM;wBACH,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;qBAC5C;oBACD,IAAI,IAAI,GAAG;wBACP,KAAK,EAAE,SAAS,GAAG,CAAC;wBACpB,KAAK,EAAE,KAAK;qBACf,CAAC;oBACF,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;oBACrC,OAAO;iBACV;qBAAM,IAAI,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,GAAG,EAAE;oBACnF,OAAO;oBACP,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;oBAC/B,OAAO;iBACV;aACJ;SACJ;IACL,CAAC;IAED,SAAS;IACT,8BAAY,GAAZ,UAAa,QAAQ,EAAE,IAAI,EAAE,OAAO;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhC,aAAa;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,QAAQ,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAChD,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBAC1C,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;uBACxD,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;uBAC7G,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,QAAQ,EAAE;oBACzE,SAAS;iBACZ;gBACD,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;aAC9C;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,OAAO;IACP,8BAAY,GAAZ,UAAa,MAAc;QACvB,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC;QAC5B,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC;IAChC,CAAC;IAED,eAAe;IACf,gCAAc,GAAd,UAAe,EAAE;QACb,IAAI,IAAI,CAAC,YAAY,IAAI,2BAAc,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YAC1D,OAAO;SACV;QACD,IAAI,IAAI,CAAC,YAAY,IAAI,2BAAc,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YAC1D,OAAO;SACV;QACD,YAAY;QACZ,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;IAC9B,CAAC;IAED,QAAQ;IACR,8BAAY,GAAZ;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBAClC,KAAK,GAAG,CAAC,CAAC;oBACV,MAAM,GAAG,KAAK,CAAC;oBACf,MAAM;iBACT;aACJ;YACD,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM;aACT;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,0BAAQ,GAAR,UAAS,EAAE;QACP,SAAS;QACT,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,4BAAe,EAAE;YAC1C,OAAO;SACV;QACD,KAAK;QACL,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAA,cAAc;QAC7B,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,sBAAS,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC1I,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC3C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACpB;SACJ;QACD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,OAAO;SACV;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACpC,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;gBACrB,QAAQ,GAAG,CAAC,CAAC;gBACb,MAAM;aACT;SACJ;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;QAC/E,EAAE,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,0BAAQ,GAAR,UAAS,EAAE;QACP,SAAS;QACT,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,4BAAe,EAAE;YAC1C,OAAO;SACV;QACD,KAAK;QACL,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,sBAAS,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,2BAAc,CAAC,MAAM;mBACrH,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBACpF,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAI,SAAS,CAAC,KAAK,KAAK,CAAC,EAAE;oBACvB,OAAO;iBACV;gBAAA,CAAC;gBAEF,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC/E,EAAE,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBAChE,OAAO,IAAI,CAAC;aACf;SACJ;IAEL,CAAC;IAED,WAAW;IACX,gCAAc,GAAd;QACI,QAAQ;QACR,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,sBAAS,CAAC,GAAG,EAAE;gBACvD,YAAY;gBACZ,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACjI;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,YAAY;IACZ,gCAAc,GAAd;QACI,QAAQ;QACR,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,sBAAS,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,2BAAc,CAAC,MAAM,EAAE;gBAC1H,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;aAChD;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAID,aAAa;IACb,oCAAkB,GAAlB,UAAmB,QAAQ,EAAE,IAAI,EAAE,OAAO;QACtC,QAAQ;QACR,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAC9F,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;aACzC;SACJ;IACL,CAAC;IAED,OAAO;IAEP,UAAU;IACV,yCAAuB,GAAvB;QACI,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,2BAAc,CAAC,GAAG,EAAE;oBAC7D,KAAK,EAAE,CAAC;oBACR,SAAS;iBACZ;gBACD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBAClC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;oBACrC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC9C;gBACD,KAAK,EAAE,CAAC;aACX;SACJ;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED,WAAW;IACX,0BAAQ,GAAR;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBAClC,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;QACD,sBAAsB;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAoBM,uBAAK,GAAZ;QACI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACjC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC9B;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC1B;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAChC;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC1B;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC/B;IACL,CAAC;IACD,wDAAwD;IAExD,gCAAc,GAAd;QACI,OAAO,IAAI,CAAC,UAAU,CAAC;QACvB,OAAO,IAAI,CAAC,SAAS,CAAC;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC;QAE1B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAExB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,sBAAW,+BAAU;aAArB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aACD,UAAsB,KAAK;YACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAHA;IAID,sBAAW,8BAAS;aAApB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aACD,UAAqB,KAAK;YACtB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;;;OAJA;IAMD,sBAAW,+BAAU;aAArB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAEO,gCAAc,GAAtB;QACI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACxC,IAAI,cAAc,GAAG,EAAE,CAAC;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC3C,IAAI,SAAS,GAAG;oBACZ,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;oBAC7C,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;oBACnC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;oBAC3B,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;oBAC7B,QAAQ,EAAE,CAAC;oBACX,QAAQ,EAAE,IAAI;iBACjB,CAAA;gBACD,cAAc,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;aACjC;YACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC;SACxC;IACL,CAAC;IAEO,iCAAe,GAAvB;QACI,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;gBACtE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACzD;SACJ;IACL,CAAC;IAED,sBAAW,kCAAa;aAAxB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;aACD,UAAyB,KAAK;YAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;;;OAHA;IAID,sBAAW,+BAAU;aAArB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aACD,UAAsB,KAAK;YACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAHA;IAID,sBAAW,8BAAS;aAApB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aACD,UAAqB,KAAK;YACtB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAHA;IAID,sBAAW,kCAAa;aAAxB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;aACD,UAAyB,KAAK;YAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;;;OAHA;IAID,sBAAW,+BAAU;aAArB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aACD,UAAsB,KAAK;YACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAHA;IAID,sBAAW,+BAAU;aAArB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aACD,UAAsB,KAAK;YACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAHA;IAID,sBAAW,6BAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aACD,UAAoB,KAAK;YACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAHA;IAID,sBAAW,6BAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aACD,UAAoB,KAAK;YACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAHA;IAID,sBAAW,kCAAa;aAAxB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;aACD,UAAyB,KAAK;YAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;;;OAHA;IAID,YAAY;IACZ,iCAAe,GAAf;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAKD,0BAAQ,GAAR;QACI,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;SACrC;aAAM;YACH,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5C;QACD,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,OAAO,QAAQ,CAAC;IACpB,CAAC;IACD,2BAAS,GAAT,UAAU,IAAa;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IACD,yBAAO,GAAP;QACI,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;SACnC;aAAM;YACH,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1C;QACD,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACtB,OAAO,OAAO,CAAC;IACnB,CAAC;IACD,0BAAQ,GAAR,UAAS,IAAa;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;QACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,6BAAW,GAAX;QACI,IAAI,WAAW,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;SAC3C;aAAM;YACH,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClD;QACD,6BAA6B;QAC7B,OAAO,WAAW,CAAC;IACvB,CAAC;IACD,8BAAY,GAAZ,UAAa,IAAa;QACtB,uBAAuB;QACvB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;QACf,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAGD,0BAAQ,GAAR,UAAS,KAAK;QACV,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED,sBAAW,0BAAK;aAAhB;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aACD,UAAiB,KAAK;YAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;;;OAJA;IAMD,4BAAU,GAAV;QACI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,6BAAW,GAAX;QACI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAEL,cAAC;AAAD,CA5jBA,AA4jBC,IAAA","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\component\\game\\pve","sourcesContent":["import { OBJECTIVE_TYPE, TILE_TYPE, WALL_TYPE, TABLEWARE_TYPE, STEP_SPAWN_PET, STEP_SPAWN_BUG, OBSTACLE_TYPE, PET_TYPE, COUNT_BOARD_PET, COUNT_BOARD_BUG } from \"../PlayDefine\";\r\n\r\nenum LevelType {\r\n    TIME,\r\n    STEP\r\n}\r\nexport default class DataPve {\r\n    public game = null;\r\n    public panelHead = null;\r\n    private _score: number = 0; // 游戏分数\r\n    private _remainStep: number = 0; // 游戏剩余步数\r\n    private _remainTime: number = 0; // 游戏剩余时间\r\n\r\n    private _petCollectNum: number = 0;// 宠物回收中的数量\r\n\r\n    private _saveStep: number = 0; // 保存的游戏剩余步数\r\n    private _saveTime: number = 0; // 保存的游戏剩余时间\r\n\r\n    private _levelDatas = null; // 关卡数据\r\n    private _levelData = null; // 当前关卡数据\r\n    private _objectives = []; // 当前目标数据\r\n    private _level: number = 0; // 当前关卡\r\n\r\n    private _fallDownPoint = [];// 下落点\r\n\r\n    public grid = [];\r\n\r\n    public hadAddStep = false;\r\n\r\n    public isTimeLevel = false;\r\n\r\n    public pfbScore: cc.Prefab = null;\r\n    public pfbMask: cc.Prefab = null;\r\n    public pfbBlock: cc.Prefab = null;\r\n    public pfbBomb: cc.Prefab = null;\r\n    public pfbObstacle: cc.Prefab = null;\r\n    public pfbWall: cc.Prefab = null;\r\n    public pfbTableware: cc.Prefab = null;\r\n    public pfbTransport: cc.Prefab = null;\r\n    public pfbGate: cc.Prefab = null;\r\n    public pfbBonusBall: cc.Prefab = null;\r\n    public pfbTileBg: cc.Prefab = null;\r\n\r\n    curLevel = 1;// 当前关卡\r\n    levelType = LevelType.STEP;// 当前关卡类型\r\n\r\n    curScore = 0;// 当前分数\r\n\r\n    spawnPetStep = 0; // 生成宠物的步数\r\n    spawnBugStep = 0;\r\n\r\n    // 是否有宠物可以下落\r\n    canPetDown() {\r\n        for (var x = 0; x < this.game.tiles.length; x++) {\r\n            for (var y = 0; y < this.game.tiles[0].length; y++) {\r\n                if (this.game.tiles[x][y] && this.game.tiles[x][y].tileType === TILE_TYPE.PET && this.game.tiles[x][y].canRecovery()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 是否解锁question\r\n    unLockQuestion(index, nodeIndex) {\r\n        let canUnLock = true;\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.NORMAL && this._objectives[index][i].count > 0) {\r\n                canUnLock = false;\r\n            }\r\n        }\r\n        if (canUnLock) {\r\n            for (let i = 0; i < this._objectives[index].length; ++i) {\r\n                if (this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.QUESTION) {\r\n                    this._objectives[index][i].objectiveType = OBJECTIVE_TYPE.NORMAL;\r\n                    let data = {\r\n                        index: nodeIndex + i,\r\n                        count: this._objectives[index][i].count\r\n                    };\r\n                    this.panelHead.updateObjective(data);\r\n                    return;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // 获得目标\r\n    getObjective(tileType, type, subType, isTouch?) {\r\n        // 获取当前目标组\r\n        let nodeIndex = 0;\r\n        let index = 0;\r\n        for (let i = 0; i < this._objectives.length; ++i) {\r\n            let isDone = true;\r\n            for (let j = 0; j < this._objectives[i].length; ++j) {\r\n                if (this._objectives[i][j].count > 0) {\r\n                    index = i;\r\n                    isDone = false;\r\n                    nodeIndex -= j;\r\n                    break;\r\n                } else {\r\n                    nodeIndex++;\r\n                }\r\n            }\r\n            if (!isDone) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // 遍历目标组，更新目标\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (tileType === this._objectives[index][i].tileType &&\r\n                type === this._objectives[index][i].type) {\r\n                if (this._objectives[index][i].subType && subType !== this._objectives[index][i].subType) {\r\n                    continue;\r\n                }\r\n                if (this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.NORMAL && this._objectives[index][i].count > 0) {\r\n                    let count = this._objectives[index][i].count - 1;\r\n                    if (count <= 0) {\r\n                        this._objectives[index][i].count = 0\r\n                        this.unLockQuestion(index, nodeIndex);\r\n                        this.checkWin();\r\n                    } else {\r\n                        this._objectives[index][i].count = count;\r\n                    }\r\n                    let data = {\r\n                        index: nodeIndex + i,\r\n                        count: count\r\n                    };\r\n                    this.panelHead.updateObjective(data);\r\n                    return;\r\n                } else if (isTouch && this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.BAN) {\r\n                    // 重置目标\r\n                    this.resetObjectives();\r\n                    this.panelHead.initObjective();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 是否需要收集\r\n    needRecovery(tileType, type, subType) {\r\n        let index = this.getCurrGroup();\r\n\r\n        // 遍历目标组，更新目标\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (tileType === this._objectives[index][i].tileType &&\r\n                type === this._objectives[index][i].type) {\r\n                if ((subType && subType !== this._objectives[index][i].subType)\r\n                    || (this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.NORMAL && this._objectives[index][i].count <= 0)\r\n                    || this._objectives[index][i].objectiveType === OBJECTIVE_TYPE.QUESTION) {\r\n                    continue;\r\n                }\r\n                return this._objectives[index][i].position;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 增加步数\r\n    addSpawnStep(number: number) {\r\n        this.stepSpawnPet += number;\r\n        this.stepSpawnBug += number;\r\n    }\r\n\r\n    // 生成目标(宠物，bug)\r\n    spawnObjective(cb) {\r\n        if (this.stepSpawnPet >= STEP_SPAWN_PET && this.spawnPet(cb)) {\r\n            return;\r\n        }\r\n        if (this.stepSpawnBug >= STEP_SPAWN_BUG && this.spawnBug(cb)) {\r\n            return;\r\n        }\r\n        // 不能生成宠物和虫子\r\n        cb && cb(null, null, null)\r\n    }\r\n\r\n    // 获取当前组\r\n    getCurrGroup() {\r\n        let index = 0;\r\n        for (let i = 0; i < this._objectives.length; ++i) {\r\n            let isDone = true;\r\n            for (let j = 0; j < this._objectives[i].length; ++j) {\r\n                if (this._objectives[i][j].count > 0) {\r\n                    index = i;\r\n                    isDone = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isDone) {\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n    spawnPet(cb) {\r\n        // 场上数量上限\r\n        if (this.getBoardPetCnt() >= COUNT_BOARD_PET) {\r\n            return;\r\n        }\r\n        // 生成\r\n        let index = this.getCurrGroup();\r\n        let allCnt = 0;// 所有需要生成的宠物数量\r\n        let arrCnt = [];\r\n        let arrIndex = [];\r\n        let indexCnt = 0;\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].tileType === TILE_TYPE.PET && this._objectives[index][i].spawnCnt < this._levelData.objective[index][i].count) {\r\n                allCnt += this._objectives[index][i].count;\r\n                arrCnt.push(allCnt);\r\n                arrIndex.push(i);\r\n            }\r\n        }\r\n        if (allCnt === 0) {\r\n            return;\r\n        }\r\n\r\n        let random = Math.random() * allCnt;\r\n        for (let i = 0; i < arrCnt.length; ++i) {\r\n            if (random <= arrCnt[i]) {\r\n                indexCnt = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let objective = this._objectives[index][arrIndex[indexCnt]];\r\n        this.stepSpawnPet = 0;\r\n        this.changePetOrBugData(objective.tileType, objective.type, objective.subType);\r\n        cb && cb(objective.tileType, objective.type, objective.subType);\r\n        return true;\r\n    }\r\n\r\n    spawnBug(cb) {\r\n        // 场上数量上限\r\n        if (this.getBoardBugCnt() >= COUNT_BOARD_BUG) {\r\n            return;\r\n        }\r\n        // 生成\r\n        let index = this.getCurrGroup();\r\n\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].tileType === TILE_TYPE.TABLEWARE && this._objectives[index][i].type === TABLEWARE_TYPE.TYPE_3\r\n                && this._objectives[index][i].spawnCnt < this._levelData.objective[index][i].count) {\r\n                let objective = this._objectives[index][i];\r\n                if (objective.count === 0) {\r\n                    return;\r\n                };\r\n\r\n                this.stepSpawnBug = 0;\r\n                this.changePetOrBugData(objective.tileType, objective.type, objective.subType);\r\n                cb && cb(objective.tileType, objective.type, objective.subType);\r\n                return true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // 计算场上宠物数量\r\n    getBoardPetCnt() {\r\n        // 当前目标组\r\n        let index = this.getCurrGroup();\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].tileType === TILE_TYPE.PET) {\r\n                // 生成数量-收集数量\r\n                count += this._objectives[index][i].spawnCnt - (this._levelData.objective[index][i].count - this._objectives[index][i].count);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    // 计算场上bug数量\r\n    getBoardBugCnt() {\r\n        // 当前目标组\r\n        let index = this.getCurrGroup();\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].tileType === TILE_TYPE.TABLEWARE && this._objectives[index][i].type === TABLEWARE_TYPE.TYPE_3) {\r\n                count += this._objectives[index][i].spawnCnt;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    // 修改宠物或者虫子数据\r\n    changePetOrBugData(tileType, type, subType) {\r\n        // 当前目标组\r\n        let index = this.getCurrGroup();\r\n\r\n        for (let i = 0; i < this._objectives[index].length; ++i) {\r\n            if (this._objectives[index][i].tileType === tileType && this._objectives[index][i].type === type) {\r\n                this._objectives[index][i].spawnCnt++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 计算步数\r\n\r\n    // 获取未完成目标\r\n    getObjectivesUnFinished() {\r\n        let arrUnFinished = [];\r\n        let index = 0;\r\n        for (let i = 0; i < this._objectives.length; ++i) {\r\n            for (let j = 0; j < this._objectives[i].length; ++j) {\r\n                if (this._objectives[i][j].objectiveType === OBJECTIVE_TYPE.BAN) {\r\n                    index++;\r\n                    continue;\r\n                }\r\n                if (this._objectives[i][j].count > 0) {\r\n                    this._objectives[i][j].index = index;\r\n                    arrUnFinished.push(this._objectives[i][j]);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n        return arrUnFinished;\r\n    }\r\n\r\n    // 检查是否达成目标\r\n    checkWin() {\r\n        for (let i = 0; i < this._objectives.length; ++i) {\r\n            for (let j = 0; j < this._objectives[i].length; ++j) {\r\n                if (this._objectives[i][j].count > 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        // console.log('win');\r\n        return true;\r\n    }\r\n    ////////////////////原gamedata的内容////////////////////////////////////\r\n    public stepSpawnPet: number = 0;\r\n    public stepSpawnBug: number = 0;\r\n    public objectiveCnt: number[] = [];// 收集总数\r\n    public objectiveSpawnCnt: number[] = [];// 生成总数\r\n    public gameBegan: boolean = null;\r\n\r\n    public step: number = 0;\r\n\r\n    public spawnLeavesCnt: number[] = [];// 生成树叶数量\r\n    public spawnBugCnt: number = 0;// 生成bug数量\r\n\r\n\r\n    public collectFruitCnt: number[] = [];// 收集水果数量\r\n    public useBombCnt: number[] = [];// 触发炸弹数量\r\n    public collectLeavesCnt: number[] = [];// 收集树叶数量\r\n    public delWallCnt: number[] = [];// 消除墙数量\r\n    public delTablawareCnt: number[] = [];// 消除餐具数量\r\n\r\n    public clear() {\r\n        this.stepSpawnPet = 0;\r\n        this.stepSpawnBug = 0;\r\n        this.spawnBugCnt = 0;\r\n        this.score = 0;\r\n        this.step = 0;\r\n        this.hadAddStep = false;\r\n        for (let i = 0; i < 4; ++i) {\r\n            this.objectiveCnt[i] = 0;\r\n            this.objectiveSpawnCnt[i] = 0;\r\n        }\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            this.spawnLeavesCnt[i] = 0;\r\n        }\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            this.useBombCnt[i] = 0;\r\n        }\r\n        for (let i = 0; i < 4; ++i) {\r\n            this.collectLeavesCnt[i] = 0;\r\n        }\r\n        for (let i = 0; i < 5; ++i) {\r\n            this.collectFruitCnt[i] = 0;\r\n        }\r\n        for (let i = 0; i < 5; ++i) {\r\n            this.delWallCnt[i] = 0;\r\n        }\r\n        for (let i = 0; i < 5; ++i) {\r\n            this.delTablawareCnt[i] = 0;\r\n        }\r\n    }\r\n    ////////////////////////////////////////////////////////\r\n\r\n    clearFreeNodes() {\r\n        delete this.freeBlocks;\r\n        delete this.freeBombs;\r\n        delete this.freeObstacles;\r\n\r\n        this.freeBlocks = [];\r\n        this.freeBombs = [];\r\n        this.freeObstacles = [];\r\n\r\n        this.pushBomb(this.popBomb());\r\n    }\r\n\r\n    public get levelDatas() {\r\n        return this._levelDatas;\r\n    }\r\n    public set levelDatas(value) {\r\n        this._levelDatas = value;\r\n    }\r\n    public get levelData() {\r\n        return this._levelData;\r\n    }\r\n    public set levelData(value) {\r\n        this._levelData = value;\r\n        this.saveObjectives();\r\n    }\r\n\r\n    public get objectives() {\r\n        return this._objectives;\r\n    }\r\n\r\n    private saveObjectives() {\r\n        this._objectives.length = 0;\r\n        let objectives = this._levelData.objective;\r\n        for (let i = 0; i < objectives.length; ++i) {\r\n            let objectiveGroup = [];\r\n            for (let j = 0; j < objectives[i].length; ++j) {\r\n                let objective = {\r\n                    objectiveType: objectives[i][j].objectiveType,\r\n                    tileType: objectives[i][j].tileType,\r\n                    type: objectives[i][j].type,\r\n                    count: objectives[i][j].count,\r\n                    spawnCnt: 0,\r\n                    position: null\r\n                }\r\n                objectiveGroup[j] = objective;\r\n            }\r\n            this._objectives[i] = objectiveGroup;\r\n        }\r\n    }\r\n\r\n    private resetObjectives() {\r\n        let objectives = this._levelData.objective;\r\n        for (let i = 0; i < this._objectives.length; ++i) {\r\n            for (let j = 0; j < this._objectives[i].length; ++j) {\r\n                this._objectives[i][j].objectiveType = objectives[i][j].objectiveType;\r\n                this._objectives[i][j].count = objectives[i][j].count;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get fallDownPoint() {\r\n        return this._fallDownPoint;\r\n    }\r\n    public set fallDownPoint(value) {\r\n        this._fallDownPoint = value;\r\n    }\r\n    public get freeBlocks() {\r\n        return this._freeBlocks;\r\n    }\r\n    public set freeBlocks(value) {\r\n        this._freeBlocks = value;\r\n    }\r\n    public get freeBombs() {\r\n        return this._freeBombs;\r\n    }\r\n    public set freeBombs(value) {\r\n        this._freeBombs = value;\r\n    }\r\n    public get freeObstacles() {\r\n        return this._freeObstacles;\r\n    }\r\n    public set freeObstacles(value) {\r\n        this._freeObstacles = value;\r\n    }\r\n    public get remainStep() {\r\n        return this._remainStep;\r\n    }\r\n    public set remainStep(value) {\r\n        this._remainStep = value;\r\n    }\r\n    public get remainTime() {\r\n        return this._remainTime;\r\n    }\r\n    public set remainTime(value) {\r\n        this._remainTime = value;\r\n    }\r\n    public get saveStep() {\r\n        return this._saveStep;\r\n    }\r\n    public set saveStep(value) {\r\n        this._saveStep = value;\r\n    }\r\n    public get saveTime() {\r\n        return this._saveTime;\r\n    }\r\n    public set saveTime(value) {\r\n        this._saveTime = value;\r\n    }\r\n    public get petCollectNum() {\r\n        return this._petCollectNum;\r\n    }\r\n    public set petCollectNum(value) {\r\n        this._petCollectNum = value;\r\n    }\r\n    // 保存剩余步数和时间\r\n    saveStepAndTime() {\r\n        this._saveStep = this._remainStep;\r\n        this._saveTime = this._remainTime;\r\n    }\r\n\r\n    _freeBlocks = [];\r\n    _freeBombs = [];\r\n    _freeObstacles = [];\r\n    popBlock(): cc.Node {\r\n        var nodBlock = null;\r\n        if (this._freeBlocks.length > 0) {\r\n            nodBlock = this._freeBlocks.pop();\r\n        } else {\r\n            nodBlock = cc.instantiate(this.pfbBlock);\r\n        }\r\n        nodBlock.active = true;\r\n        return nodBlock;\r\n    }\r\n    pushBlock(node: cc.Node) {\r\n        node.active = false;\r\n        node.x = 10000;\r\n        this._freeBlocks.push(node);\r\n    }\r\n    popBomb(): cc.Node {\r\n        var nodBomb = null;\r\n        if (this._freeBombs.length > 0) {\r\n            nodBomb = this._freeBombs.pop();\r\n        } else {\r\n            nodBomb = cc.instantiate(this.pfbBomb);\r\n        }\r\n        nodBomb.active = true;\r\n        return nodBomb;\r\n    }\r\n    pushBomb(node: cc.Node) {\r\n        node.active = false;\r\n        node.x = 10000;\r\n        this._freeBombs.push(node);\r\n    }\r\n    popObstacle(): cc.Node {\r\n        var nodObstacle = null;\r\n        if (this._freeObstacles.length > 0) {\r\n            nodObstacle = this._freeObstacles.pop();\r\n        } else {\r\n            nodObstacle = cc.instantiate(this.pfbObstacle);\r\n        }\r\n        // nodObstacle.active = true;\r\n        return nodObstacle;\r\n    }\r\n    pushObstacle(node: cc.Node) {\r\n        // node.active = false;\r\n        node.x = 10000;\r\n        this._freeObstacles.push(node);\r\n    }\r\n\r\n\r\n    getScore(score) {\r\n        this._score += score;\r\n        this.updateScore();\r\n    }\r\n\r\n    public get score() {\r\n        return this._score;\r\n    }\r\n    public set score(value) {\r\n        this._score = value;\r\n        this.updateScore();\r\n    }\r\n\r\n    clearScore() {\r\n        this._score = 0;\r\n    }\r\n\r\n    updateScore() {\r\n        this.panelHead.updateScore(this._score);\r\n    }\r\n\r\n}\r\n"]}