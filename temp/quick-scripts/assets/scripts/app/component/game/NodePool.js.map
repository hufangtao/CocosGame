{"version":3,"sources":["NodePool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\component\\game","sourcesContent":["import { Play } from \"../../module/Modules\";\r\n\r\nexport default class NodePool {\r\n    public static initPool() {\r\n        NodePoolHelper.INSTANCE.initPool();\r\n    }\r\n    \r\n    public static getNodeBlock() {\r\n        return NodePoolHelper.INSTANCE.getNodeBlock();\r\n    }\r\n    public static getNodeBomb() {\r\n        return NodePoolHelper.INSTANCE.getNodeBomb();\r\n    }\r\n    public static getNodeWall() {\r\n        return NodePoolHelper.INSTANCE.getNodeWall();\r\n    }\r\n    public static getNodeTableware() {\r\n        return NodePoolHelper.INSTANCE.getNodeTableware();\r\n    }\r\n    public static getNodeObstacle() {\r\n        return NodePoolHelper.INSTANCE.getNodeObstacle();\r\n    }\r\n    public static getNodeScore() {\r\n        return NodePoolHelper.INSTANCE.getNodeScore();\r\n    }\r\n\r\n    public static putNodeBlock(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeBlock(value);\r\n    }\r\n    public static putNodeBomb(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeBomb(value);\r\n    }\r\n    public static putNodeWall(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeWall(value);\r\n    }\r\n    public static putNodeTableware(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeTableware(value);\r\n    }\r\n    public static putNodeObstacle(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeObstacle(value);\r\n    }\r\n    public static putNodeScore(value: cc.Node) {\r\n        NodePoolHelper.INSTANCE.putNodeScore(value);\r\n    }\r\n}\r\n\r\nclass NodePoolHelper {\r\n    private static singleInstance: NodePoolHelper;\r\n\r\n    public static get INSTANCE() {\r\n        if (!this.singleInstance) {\r\n            this.singleInstance = new NodePoolHelper();\r\n        }\r\n        return this.singleInstance;\r\n    }\r\n\r\n    private nodPoolBlock: cc.NodePool;\r\n    private nodPoolBomb: cc.NodePool;\r\n    private nodPoolWall: cc.NodePool;\r\n    private nodPoolTableware: cc.NodePool;\r\n    private nodPoolObstacle: cc.NodePool;\r\n    private nodPoolScore: cc.NodePool;\r\n\r\n    public initPool() {\r\n        if(!this.nodPoolScore){\r\n            this.nodPoolScore = new cc.NodePool();\r\n        }else{\r\n            this.nodPoolScore.clear();\r\n        }\r\n    }\r\n\r\n    public getNodeBlock() {\r\n        if (this.nodPoolBlock.size() > 0) {\r\n            return this.nodPoolBlock.get();\r\n        }\r\n        var nodBlock = cc.instantiate(Play.DataPve.pfbBlock);\r\n        return nodBlock;\r\n    }\r\n    public getNodeBomb() {\r\n        if (this.nodPoolBomb.size() > 0) {\r\n            return this.nodPoolBomb.get();\r\n        }\r\n        var nodBomb = cc.instantiate(Play.DataPve.pfbBomb);\r\n        return nodBomb;\r\n    }\r\n\r\n    public getNodeWall() {\r\n        if (this.nodPoolWall.size() > 0) {\r\n            return this.nodPoolWall.get();\r\n        }\r\n        var nodWall = cc.instantiate(Play.DataPve.pfbWall);\r\n        return nodWall;\r\n    }\r\n    public getNodeTableware() {\r\n        if (this.nodPoolTableware.size() > 0) {\r\n            return this.nodPoolTableware.get();\r\n        }\r\n        var nodTableware = cc.instantiate(Play.DataPve.pfbTableware);\r\n        return nodTableware;\r\n    }\r\n\r\n    public getNodeObstacle() {\r\n        if (this.nodPoolObstacle.size() > 0) {\r\n            return this.nodPoolObstacle.get();\r\n        }\r\n        var nodObstacle = cc.instantiate(Play.DataPve.pfbObstacle);\r\n        return nodObstacle;\r\n    }\r\n\r\n    public getNodeScore() {\r\n        if (this.nodPoolScore.size() > 0) {\r\n            return this.nodPoolScore.get();\r\n        }\r\n        var nodScore = cc.instantiate(Play.DataPve.pfbScore);\r\n        return nodScore;\r\n    }\r\n\r\n    public putNodeBlock(value: cc.Node) {\r\n        this.nodPoolBlock.put(value)\r\n    }\r\n    public putNodeBomb(value: cc.Node) {\r\n        this.nodPoolBomb.put(value)\r\n    }\r\n    public putNodeWall(value: cc.Node) {\r\n        this.nodPoolWall.put(value)\r\n    }\r\n    public putNodeTableware(value: cc.Node) {\r\n        this.nodPoolTableware.put(value)\r\n    }\r\n    public putNodeObstacle(value: cc.Node) {\r\n        this.nodPoolObstacle.put(value)\r\n    }\r\n\r\n    public putNodeScore(value: cc.Node) {\r\n        this.nodPoolScore.put(value)\r\n    }\r\n}\r\n"]}