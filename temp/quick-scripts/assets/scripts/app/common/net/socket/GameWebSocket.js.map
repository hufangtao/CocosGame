{"version":3,"sources":["GameWebSocket.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\app\\common\\net\\socket","sourcesContent":["import EventDispatcher from \"../../event/EventDispatcher\";\r\nimport InternalWebScoket from \"./InternalWebSocket\";\r\nimport { SOCKET_CLOSE, SOCKET_CONNECT, SOCKET_DATA, SOCKET_IO_ERROR } from \"./SocketDefine\";\r\nimport { ByteArray } from \"../NetByteArray\";\r\n\r\nexport default class GameWebSocket extends EventDispatcher {\r\n\r\n  public static TYPE_STRING: string = \"webSocketTypeString\";\r\n  public static TYPE_BINARY: string = \"webSocketTypeBinary\";\r\n\r\n  private socket: InternalWebScoket;\r\n\r\n  // 对于文本类型的socket数据时 写入内容暂存数据\r\n  private writeMessage: string = \"\";\r\n  // 对于文本类型的socket数据是 读取内容暂存数据\r\n  private readMessage: string = \"\";\r\n\r\n  // 读取缓存 从socket读取数据\r\n  private readBuffer: ByteArray;\r\n  // 写入缓存 往socket写入数据\r\n  private writeBuffer: ByteArray;\r\n\r\n  // 是否已有字节写入\r\n  private isBytesWritten: boolean = false;\r\n  // 是否已经连接\r\n  private isConnected: boolean = false;\r\n  // 是否正在进行连接\r\n  private isConnecting: boolean = false;\r\n\r\n  // socket数据类型\r\n  private socketType: string = GameWebSocket.TYPE_STRING;\r\n\r\n  constructor() {\r\n    super();\r\n    this.isConnected = false;\r\n    this.writeMessage = \"\";\r\n    this.readMessage = \"\";\r\n    this.node = new cc.Node(\"dygame-websocket\");\r\n    this.socket = new InternalWebScoket();\r\n    this.socket.addCallbacks(this.onConnect, this.onClose, this.onSocketData, this.onError, this);\r\n  }\r\n\r\n  public get type(): string {\r\n    return this.socketType;\r\n  }\r\n\r\n  public set type(value: string) {\r\n    this.socketType = value;\r\n    if (value === GameWebSocket.TYPE_BINARY && !this.writeBuffer) {\r\n      this.readBuffer = new ByteArray();\r\n      this.writeBuffer = new ByteArray();\r\n    }\r\n  }\r\n\r\n  // socket 是否已经连接\r\n  public get connected(): boolean {\r\n    return this.isConnected;\r\n  }\r\n\r\n  // 指定host和port进行连接\r\n  public connect(host: string, port: number) {\r\n    if (!this.isConnecting && !this.isConnected) {\r\n      this.isConnecting = true;\r\n      this.socket.connect(host, port);\r\n    }\r\n  }\r\n\r\n  // 根据url连接服务器\r\n  public connectByUrl(url: string): void {\r\n    if (!this.isConnecting && !this.isConnected) {\r\n      this.isConnecting = true;\r\n      this.socket.connectByUrl(url);\r\n    }\r\n  }\r\n\r\n  // 关闭socket连接\r\n  public close(): void {\r\n    if (this.isConnected) {\r\n      this.socket.close();\r\n    }\r\n  }\r\n\r\n  // 立即往socket写入数据\r\n  public flush(): void {\r\n    if (!this.isConnected) {\r\n      return;\r\n    }\r\n\r\n    if (this.writeMessage) {\r\n      this.socket.send(this.writeMessage);\r\n      this.writeMessage = \"\";\r\n    }\r\n    if (this.isBytesWritten) {\r\n      this.socket.send(this.writeBuffer.buffer);\r\n      this.isBytesWritten = false;\r\n      this.writeBuffer.clear();\r\n    }\r\n  }\r\n\r\n  // 发送文本\r\n  public writeUTF(message: string): void {\r\n    if (!this.isConnected) {\r\n      return;\r\n    }\r\n\r\n    if (this.socketType === GameWebSocket.TYPE_BINARY) {\r\n      this.isBytesWritten = true;\r\n      this.writeBuffer.writeUTF(message);\r\n    } else {\r\n      this.writeMessage += message;\r\n    }\r\n\r\n    this.flush();\r\n  }\r\n\r\n  // 读取文本\r\n  public readUTF(): string {\r\n    let message: string;\r\n    if (this.socketType === GameWebSocket.TYPE_BINARY) {\r\n      this.readBuffer.position = 0;\r\n      message = this.readBuffer.readUTF();\r\n      this.readBuffer.clear();\r\n    } else {\r\n      message = this.readMessage;\r\n      this.readMessage = \"\";\r\n    }\r\n    return message;\r\n  }\r\n\r\n  // 写入字节\r\n  public writeBytes(bytes: ByteArray, offset: number = 0, length: number = 0): void {\r\n    if (!this.isConnected) {\r\n      return;\r\n    }\r\n    if (!this.writeBuffer) {\r\n      DyGame.$error(1);\r\n      return;\r\n    }\r\n\r\n    this.isBytesWritten = true;\r\n    this.writeBuffer.writeBytes(bytes, offset, length);\r\n    this.flush();\r\n  }\r\n\r\n  // 读取字节内容写入到目标缓存\r\n  public readBytes(dstBuffer: ByteArray, offset: number = 0, length: number = 0): void {\r\n    if (!this.readBuffer) {\r\n      DyGame.$error(1);\r\n      return;\r\n    }\r\n    this.readBuffer.position = 0;\r\n    this.readBuffer.readBytes(dstBuffer, offset, length);\r\n    this.readBuffer.clear();\r\n  }\r\n\r\n  // socket 连接成功时回调\r\n  private onConnect(): void {\r\n    this.isConnected = true;\r\n    this.isConnecting = false;\r\n    this.emit(SOCKET_CONNECT);\r\n  }\r\n\r\n  // socket 连接断开时回调\r\n  private onClose(): void {\r\n    this.isConnected = false;\r\n    this.emit(SOCKET_CLOSE);\r\n  }\r\n\r\n  // socket 出现错误时回调\r\n  private onError(): void {\r\n    if (this.isConnecting) {\r\n      this.isConnecting = false;\r\n    }\r\n    this.emit(SOCKET_IO_ERROR);\r\n  }\r\n\r\n  // socket 收到数据\r\n  private onSocketData(message: any): void {\r\n    if (typeof message === \"string\") {\r\n      this.readMessage += message;\r\n    } else {\r\n      this.readBuffer._writeUint8Array(new Uint8Array(message));\r\n    }\r\n    this.emit(SOCKET_DATA);\r\n  }\r\n\r\n}\r\n"]}