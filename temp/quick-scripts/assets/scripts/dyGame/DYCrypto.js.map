{"version":3,"sources":["DYCrypto.ts"],"names":[],"mappings":"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AAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YACvE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YACvE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,U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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\dyGame","sourcesContent":["export default class DYCrypto{\r\n    static get base64(){\r\n        if (!DYCrypto.theBase64){\r\n            DYCrypto.theBase64 = new Base64();\r\n        }\r\n\r\n        return DYCrypto.theBase64;\r\n    }\r\n\r\n    static get md5(){\r\n        if (!DYCrypto.theMD5){\r\n            DYCrypto.theMD5 = new MD5();\r\n        }\r\n        return DYCrypto.theMD5;\r\n    }\r\n\r\n    private static theBase64: Base64;\r\n    private static theMD5: MD5;\r\n}\r\n\r\nfunction xor(str) { \r\n    var monyer = 0;\r\n    for (var i = 0; i < str.length; i++) { \r\n        monyer += str.charCodeAt(i)^0x12;\r\n    } \r\n    return monyer; \r\n}\r\n\r\n// BASE64\r\nclass Base64{\r\n    // private property\r\n    private _keyStr:string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n \r\n    // public method for encoding\r\n    public encode = function (input: string) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        input = this._utf8_encode(input);\r\n        while (i < input.length) {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            output = output +\r\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n        }\r\n        return output;\r\n    }\r\n \r\n    // public method for decoding\r\n    public decode(input : string) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n        while (i < input.length) {\r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n            output = output + String.fromCharCode(chr1);\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n        }\r\n        output = this._utf8_decode(output);\r\n        return output;\r\n    }\r\n \r\n    // private method for UTF-8 encoding\r\n    private _utf8_encode(string: string) {\r\n        string = string.replace(/\\r\\n/g,\"\\n\");\r\n        var utftext = \"\";\r\n        for (var n = 0; n < string.length; n++) {\r\n            var c = string.charCodeAt(n);\r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            } else if((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            } else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n \r\n        }\r\n        return utftext;\r\n    }\r\n \r\n    // private method for UTF-8 decoding\r\n    private _utf8_decode(utftext: string) {\r\n        var string = \"\";\r\n        var i = 0;\r\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\r\n        while ( i < utftext.length ) {\r\n            c = utftext.charCodeAt(i);\r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            } else if((c > 191) && (c < 224)) {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            } else {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                c3 = utftext.charCodeAt(i+2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return string;\r\n    }\r\n}\r\n\r\nvar MD5_CORE = function(data) {\r\n    // convert number to (unsigned) 32 bit hex, zero filled string\r\n    function to_zerofilled_hex(n) {     \r\n        var t1 = (n >>> 0).toString(16);\r\n        return \"00000000\".substr(0, 8 - t1.length) + t1;\r\n    }\r\n\r\n    // convert array of chars to array of bytes \r\n    function chars_to_bytes(ac) {\r\n        var retval = [];\r\n        for (var i = 0; i < ac.length; i++) {\r\n            retval = retval.concat(str_to_bytes(ac[i]));\r\n        }\r\n        return retval;\r\n    }\r\n\r\n\r\n    // convert a 64 bit unsigned number to array of bytes. Little endian\r\n    function int64_to_bytes(num) {\r\n        var retval = [];\r\n        for (var i = 0; i < 8; i++) {\r\n            retval.push(num & 0xFF);\r\n            num = num >>> 8;\r\n        }\r\n        return retval;\r\n    }\r\n\r\n    //  32 bit left-rotation\r\n    function rol(num, places) {\r\n        return ((num << places) & 0xFFFFFFFF) | (num >>> (32 - places));\r\n    }\r\n\r\n    // The 4 MD5 functions\r\n    function fF(b, c, d) {\r\n        return (b & c) | (~b & d);\r\n    }\r\n\r\n    function fG(b, c, d) {\r\n        return (d & b) | (~d & c);\r\n    }\r\n\r\n    function fH(b, c, d) {\r\n        return b ^ c ^ d;\r\n    }\r\n\r\n    function fI(b, c, d) {\r\n        return c ^ (b | ~d);\r\n    }\r\n\r\n    // pick 4 bytes at specified offset. Little-endian is assumed\r\n    function bytes_to_int32(arr, off) {\r\n        return (arr[off + 3] << 24) | (arr[off + 2] << 16) | (arr[off + 1] << 8) | (arr[off]);\r\n    }\r\n\r\n    /*\r\n    Conver string to array of bytes in UTF-8 encoding\r\n    See: \r\n    http://www.dangrossman.info/2007/05/25/handling-utf-8-in-javascript-php-and-non-utf8-databases/\r\n    http://stackoverflow.com/questions/1240408/reading-bytes-from-a-javascript-string\r\n    How about a String.getBytes(<ENCODING>) for Javascript!? Isn't it time to add it?\r\n    */\r\n    function str_to_bytes(str) {\r\n        var retval = [ ];\r\n        for (var i = 0; i < str.length; i++)\r\n            if (str.charCodeAt(i) <= 0x7F) {\r\n                retval.push(str.charCodeAt(i));\r\n            } else {\r\n                var tmp = encodeURIComponent(str.charAt(i)).substr(1).split(\"%\")\r\n                for (var j = 0; j < tmp.length; j++) {\r\n                    retval.push(parseInt(tmp[j], 0x10));\r\n                }\r\n            }\r\n            return retval;\r\n    }\r\n\r\n\r\n    // convert the 4 32-bit buffers to a 128 bit hex string. (Little-endian is assumed)\r\n    function int128le_to_hex(a, b, c, d) {\r\n        var ra = \"\";\r\n        var t = 0;\r\n        var ta = 0;\r\n        for (var i = 3; i >= 0; i--) {\r\n            ta = arguments[i];\r\n            t = (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | ta;\r\n            ra = ra + to_zerofilled_hex(t);\r\n        }\r\n        return ra;\r\n    }\r\n\r\n    // conversion from typed byte array to plain javascript array \r\n    function typed_to_plain(tarr) {\r\n        var retval = new Array(tarr.length);\r\n        for (var i = 0; i < tarr.length; i++) {\r\n            retval[i] = tarr[i];\r\n        }\r\n        return retval;\r\n    }\r\n\r\n    // check input data type and perform conversions if needed\r\n    var databytes = null;\r\n    \r\n    function cloneArray(inpArr) {\r\n        return inpArr.slice();\r\n    }\r\n    \r\n    // String\r\n    var type_mismatch = null;\r\n    if (typeof data == \"string\") {\r\n        // convert string to array bytes\r\n        databytes = str_to_bytes(data);\r\n    } else if (data.constructor == Array) {\r\n        if (data.length === 0) {\r\n            // if it's empty, just assume array of bytes\r\n            databytes = cloneArray(data);\r\n        } else if (typeof data[0] == \"string\") {\r\n            databytes = chars_to_bytes(data);\r\n        } else if (typeof data[0] == \"number\") {\r\n            databytes = cloneArray(data);\r\n        } else {\r\n            type_mismatch = typeof data[0];\r\n        }\r\n    } else if (typeof ArrayBuffer != \"undefined\") {\r\n        if (data instanceof ArrayBuffer) {\r\n            databytes = typed_to_plain(new Uint8Array(data));\r\n        } else if ((data instanceof Uint8Array) || (data instanceof Int8Array)) {\r\n            databytes = typed_to_plain(data);\r\n        } else if ((data instanceof Uint32Array) || (data instanceof Int32Array) || \r\n               (data instanceof Uint16Array) || (data instanceof Int16Array) || \r\n        (data instanceof Float32Array) || (data instanceof Float64Array)\r\n         ) {\r\n             databytes = typed_to_plain(new Uint8Array(data.buffer));\r\n        } else {\r\n            type_mismatch = typeof data;\r\n        }   \r\n    } else {\r\n        type_mismatch = typeof data;\r\n    }\r\n\r\n    if (type_mismatch) {\r\n        alert(\"MD5 type mismatch, cannot process \" + type_mismatch);\r\n    }\r\n\r\n    function _add(n1, n2) {\r\n        return 0x0FFFFFFFF & (n1 + n2);\r\n    }\r\n\r\n\r\n    return do_digest()\r\n\r\n    function do_digest() {\r\n\r\n        // function update partial state for each run\r\n        function updateRun(nf, sin32, dw32, b32) {\r\n            var temp = d;\r\n            d = c;\r\n            c = b;\r\n            //b = b + rol(a + (nf + (sin32 + dw32)), b32)\r\n            b = _add(b, \r\n                rol( \r\n                    _add(a, \r\n                        _add(nf, _add(sin32, dw32))\r\n                    ), b32\r\n                )\r\n            );\r\n            a = temp;\r\n        }\r\n\r\n        // save original length\r\n        var org_len = databytes.length;\r\n\r\n        // first append the \"1\" + 7x \"0\"\r\n        databytes.push(0x80);\r\n\r\n        // determine required amount of padding\r\n        var tail = databytes.length % 64\r\n        // no room for msg length?\r\n        if (tail > 56) {\r\n            // pad to next 512 bit block\r\n            for (var i = 0; i < (64 - tail); i++) {\r\n                databytes.push(0x0);\r\n            }\r\n            tail = databytes.length % 64;\r\n        }\r\n        for (i = 0; i < (56 - tail); i++) {\r\n            databytes.push(0x0);\r\n        }\r\n        // message length in bits mod 512 should now be 448\r\n        // append 64 bit, little-endian original msg length (in *bits*!)\r\n        databytes = databytes.concat(int64_to_bytes(org_len * 8));\r\n\r\n        // initialize 4x32 bit state\r\n        var h0 = 0x67452301;\r\n        var h1 = 0xEFCDAB89;\r\n        var h2 = 0x98BADCFE;\r\n        var h3 = 0x10325476;\r\n\r\n        // temp buffers\r\n        var a = 0, b = 0, c = 0, d = 0;\r\n\r\n        // Digest message\r\n        for (i = 0; i < databytes.length / 64; i++) {\r\n            // initialize run\r\n            a = h0;\r\n            b = h1;\r\n            c = h2;\r\n            d = h3;\r\n\r\n            var ptr = i * 64;\r\n\r\n            // do 64 runs\r\n            updateRun(fF(b, c, d), 0xd76aa478, bytes_to_int32(databytes, ptr), 7);\r\n            updateRun(fF(b, c, d), 0xe8c7b756, bytes_to_int32(databytes, ptr + 4), 12);\r\n            updateRun(fF(b, c, d), 0x242070db, bytes_to_int32(databytes, ptr + 8), 17);\r\n            updateRun(fF(b, c, d), 0xc1bdceee, bytes_to_int32(databytes, ptr + 12), 22);\r\n            updateRun(fF(b, c, d), 0xf57c0faf, bytes_to_int32(databytes, ptr + 16), 7);\r\n            updateRun(fF(b, c, d), 0x4787c62a, bytes_to_int32(databytes, ptr + 20), 12);\r\n            updateRun(fF(b, c, d), 0xa8304613, bytes_to_int32(databytes, ptr + 24), 17);\r\n            updateRun(fF(b, c, d), 0xfd469501, bytes_to_int32(databytes, ptr + 28), 22);\r\n            updateRun(fF(b, c, d), 0x698098d8, bytes_to_int32(databytes, ptr + 32), 7);\r\n            updateRun(fF(b, c, d), 0x8b44f7af, bytes_to_int32(databytes, ptr + 36), 12);\r\n            updateRun(fF(b, c, d), 0xffff5bb1, bytes_to_int32(databytes, ptr + 40), 17);\r\n            updateRun(fF(b, c, d), 0x895cd7be, bytes_to_int32(databytes, ptr + 44), 22);\r\n            updateRun(fF(b, c, d), 0x6b901122, bytes_to_int32(databytes, ptr + 48), 7);\r\n            updateRun(fF(b, c, d), 0xfd987193, bytes_to_int32(databytes, ptr + 52), 12);\r\n            updateRun(fF(b, c, d), 0xa679438e, bytes_to_int32(databytes, ptr + 56), 17);\r\n            updateRun(fF(b, c, d), 0x49b40821, bytes_to_int32(databytes, ptr + 60), 22);\r\n            updateRun(fG(b, c, d), 0xf61e2562, bytes_to_int32(databytes, ptr + 4), 5);\r\n            updateRun(fG(b, c, d), 0xc040b340, bytes_to_int32(databytes, ptr + 24), 9);\r\n            updateRun(fG(b, c, d), 0x265e5a51, bytes_to_int32(databytes, ptr + 44), 14);\r\n            updateRun(fG(b, c, d), 0xe9b6c7aa, bytes_to_int32(databytes, ptr), 20);\r\n            updateRun(fG(b, c, d), 0xd62f105d, bytes_to_int32(databytes, ptr + 20), 5);\r\n            updateRun(fG(b, c, d), 0x2441453, bytes_to_int32(databytes, ptr + 40), 9);\r\n            updateRun(fG(b, c, d), 0xd8a1e681, bytes_to_int32(databytes, ptr + 60), 14);\r\n            updateRun(fG(b, c, d), 0xe7d3fbc8, bytes_to_int32(databytes, ptr + 16), 20);\r\n            updateRun(fG(b, c, d), 0x21e1cde6, bytes_to_int32(databytes, ptr + 36), 5);\r\n            updateRun(fG(b, c, d), 0xc33707d6, bytes_to_int32(databytes, ptr + 56), 9);\r\n            updateRun(fG(b, c, d), 0xf4d50d87, bytes_to_int32(databytes, ptr + 12), 14);\r\n            updateRun(fG(b, c, d), 0x455a14ed, bytes_to_int32(databytes, ptr + 32), 20);\r\n            updateRun(fG(b, c, d), 0xa9e3e905, bytes_to_int32(databytes, ptr + 52), 5);\r\n            updateRun(fG(b, c, d), 0xfcefa3f8, bytes_to_int32(databytes, ptr + 8), 9);\r\n            updateRun(fG(b, c, d), 0x676f02d9, bytes_to_int32(databytes, ptr + 28), 14);\r\n            updateRun(fG(b, c, d), 0x8d2a4c8a, bytes_to_int32(databytes, ptr + 48), 20);\r\n            updateRun(fH(b, c, d), 0xfffa3942, bytes_to_int32(databytes, ptr + 20), 4);\r\n            updateRun(fH(b, c, d), 0x8771f681, bytes_to_int32(databytes, ptr + 32), 11);\r\n            updateRun(fH(b, c, d), 0x6d9d6122, bytes_to_int32(databytes, ptr + 44), 16);\r\n            updateRun(fH(b, c, d), 0xfde5380c, bytes_to_int32(databytes, ptr + 56), 23);\r\n            updateRun(fH(b, c, d), 0xa4beea44, bytes_to_int32(databytes, ptr + 4), 4);\r\n            updateRun(fH(b, c, d), 0x4bdecfa9, bytes_to_int32(databytes, ptr + 16), 11);\r\n            updateRun(fH(b, c, d), 0xf6bb4b60, bytes_to_int32(databytes, ptr + 28), 16);\r\n            updateRun(fH(b, c, d), 0xbebfbc70, bytes_to_int32(databytes, ptr + 40), 23);\r\n            updateRun(fH(b, c, d), 0x289b7ec6, bytes_to_int32(databytes, ptr + 52), 4);\r\n            updateRun(fH(b, c, d), 0xeaa127fa, bytes_to_int32(databytes, ptr), 11);\r\n            updateRun(fH(b, c, d), 0xd4ef3085, bytes_to_int32(databytes, ptr + 12), 16);\r\n            updateRun(fH(b, c, d), 0x4881d05, bytes_to_int32(databytes, ptr + 24), 23);\r\n            updateRun(fH(b, c, d), 0xd9d4d039, bytes_to_int32(databytes, ptr + 36), 4);\r\n            updateRun(fH(b, c, d), 0xe6db99e5, bytes_to_int32(databytes, ptr + 48), 11);\r\n            updateRun(fH(b, c, d), 0x1fa27cf8, bytes_to_int32(databytes, ptr + 60), 16);\r\n            updateRun(fH(b, c, d), 0xc4ac5665, bytes_to_int32(databytes, ptr + 8), 23);\r\n            updateRun(fI(b, c, d), 0xf4292244, bytes_to_int32(databytes, ptr), 6);\r\n            updateRun(fI(b, c, d), 0x432aff97, bytes_to_int32(databytes, ptr + 28), 10);\r\n            updateRun(fI(b, c, d), 0xab9423a7, bytes_to_int32(databytes, ptr + 56), 15);\r\n            updateRun(fI(b, c, d), 0xfc93a039, bytes_to_int32(databytes, ptr + 20), 21);\r\n            updateRun(fI(b, c, d), 0x655b59c3, bytes_to_int32(databytes, ptr + 48), 6);\r\n            updateRun(fI(b, c, d), 0x8f0ccc92, bytes_to_int32(databytes, ptr + 12), 10);\r\n            updateRun(fI(b, c, d), 0xffeff47d, bytes_to_int32(databytes, ptr + 40), 15);\r\n            updateRun(fI(b, c, d), 0x85845dd1, bytes_to_int32(databytes, ptr + 4), 21);\r\n            updateRun(fI(b, c, d), 0x6fa87e4f, bytes_to_int32(databytes, ptr + 32), 6);\r\n            updateRun(fI(b, c, d), 0xfe2ce6e0, bytes_to_int32(databytes, ptr + 60), 10);\r\n            updateRun(fI(b, c, d), 0xa3014314, bytes_to_int32(databytes, ptr + 24), 15);\r\n            updateRun(fI(b, c, d), 0x4e0811a1, bytes_to_int32(databytes, ptr + 52), 21);\r\n            updateRun(fI(b, c, d), 0xf7537e82, bytes_to_int32(databytes, ptr + 16), 6);\r\n            updateRun(fI(b, c, d), 0xbd3af235, bytes_to_int32(databytes, ptr + 44), 10);\r\n            updateRun(fI(b, c, d), 0x2ad7d2bb, bytes_to_int32(databytes, ptr + 8), 15);\r\n            updateRun(fI(b, c, d), 0xeb86d391, bytes_to_int32(databytes, ptr + 36), 21);\r\n\r\n            // update buffers\r\n            h0 = _add(h0, a);\r\n            h1 = _add(h1, b);\r\n            h2 = _add(h2, c);\r\n            h3 = _add(h3, d);\r\n        }\r\n        // Done! Convert buffers to 128 bit (LE)\r\n        return int128le_to_hex(h3, h2, h1, h0);\r\n    }\r\n};\r\n\r\n// MD5\r\nclass MD5 {\r\n    \r\n    public constructor() {\r\n\r\n    }\r\n    private hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */\r\n    private b64pad = \"\";  /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n    /*\r\n    * These are the privates you'll usually want to call\r\n    * They take string arguments and return either hex or base-64 encoded strings\r\n    */\r\n    public hex_md5(s) { return this.rstr2hex(this.rstr_md5(this.str2rstr_utf8(s))); }//这个函数就行了，\r\n    public b64_md5(s) { return this.rstr2b64(this.rstr_md5(this.str2rstr_utf8(s))); }\r\n    public any_md5(s,e) { return this.rstr2any(this.rstr_md5(this.str2rstr_utf8(s)),e); }\r\n    public hex_hmac_md5(k,d)\r\n    { return this.rstr2hex(this.rstr_hmac_md5(this.str2rstr_utf8(k),this.str2rstr_utf8(d))); }\r\n    private b64_hmac_md5(k,d)\r\n    { return this.rstr2b64(this.rstr_hmac_md5(this.str2rstr_utf8(k),this.str2rstr_utf8(d))); }\r\n    private any_hmac_md5(k,d,e)\r\n    { return this.rstr2any(this.rstr_hmac_md5(this.str2rstr_utf8(k),this.str2rstr_utf8(d)),e); }\r\n\r\n    public hex_md5_for_uint8arr(s){ return MD5_CORE(s);}\r\n    \r\n    /*\r\n    * Perform a simple self-test to see if the VM is working\r\n    */\r\n    public md5_vm_test() {\r\n        return this.hex_md5(\"abc\").toLowerCase() == \"900150983cd24fb0d6963f7d28e17f72\";\r\n    }\r\n\r\n    /*\r\n    * Calculate the MD5 of a raw string\r\n    */\r\n   public rstr_md5(s) {  \r\n         \r\n        return this.binl2rstr(this.binl_md5(this.rstr2binl(s),s.length * 8));\r\n    }\r\n\r\n    /*\r\n    * Calculate the HMAC-MD5, of a key and some data (raw strings)\r\n    */\r\n    public rstr_hmac_md5(key,data) {\r\n        var bkey = this.rstr2binl(key);\r\n        if(bkey.length > 16) bkey = this.binl_md5(bkey,key.length * 8);\r\n\r\n        var ipad = Array(16),opad = Array(16);\r\n        for(var i = 0;i < 16;i++) {\r\n            ipad[i] = bkey[i] ^ 0x36363636;\r\n            opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n        }\r\n        \r\n        var hash = this.binl_md5(ipad.concat(this.rstr2binl(data)),512 + data.length * 8);\r\n        return this.binl2rstr(this.binl_md5(opad.concat(hash),512 + 128));\r\n    }\r\n\r\n    /*\r\n    * Convert a raw string to a hex string\r\n    */\r\n    public rstr2hex(input) {\r\n        try { this.hexcase } catch(e) { this.hexcase = 0; }\r\n        var hex_tab = this.hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n        var output = \"\";\r\n        var x;\r\n        for(var i = 0;i < input.length;i++) {\r\n            x = input.charCodeAt(i);\r\n            output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n                + hex_tab.charAt(x & 0x0F);\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Convert a raw string to a base-64 string\r\n    */\r\n    public rstr2b64(input) {\r\n        try { this.b64pad } catch(e) { this.b64pad = ''; }\r\n        var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n        var output = \"\";\r\n        var len = input.length;\r\n        for(var i = 0;i < len;i += 3) {\r\n            var triplet = (input.charCodeAt(i) << 16)\r\n                | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0)\r\n                | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\r\n            for(var j = 0;j < 4;j++) {\r\n                if(i * 8 + j * 6 > input.length * 8) output += this.b64pad;\r\n                else output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Convert a raw string to an arbitrary string encoding\r\n    */\r\n    public rstr2any(input,encoding) {\r\n        var divisor = encoding.length;\r\n        var i,j,q,x,quotient;\r\n\r\n        /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n        var dividend = Array(Math.ceil(input.length / 2));\r\n        for(i = 0;i < dividend.length;i++) {\r\n            dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n        }\r\n\r\n        /*\r\n        * Repeatedly perform a long division. The binary array forms the dividend,\r\n        * the length of the encoding is the divisor. Once computed, the quotient\r\n        * forms the dividend for the next step. All remainders are stored for later\r\n        * use.\r\n        */\r\n        var full_length = Math.ceil(input.length * 8 /\r\n            (Math.log(encoding.length) / Math.log(2)));\r\n        var remainders = Array(full_length);\r\n        for(j = 0;j < full_length;j++) {\r\n            quotient = Array();\r\n            x = 0;\r\n            for(i = 0;i < dividend.length;i++) {\r\n                x = (x << 16) + dividend[i];\r\n                q = Math.floor(x / divisor);\r\n                x -= q * divisor;\r\n                if(quotient.length > 0 || q > 0)\r\n                    quotient[quotient.length] = q;\r\n            }\r\n            remainders[j] = x;\r\n            dividend = quotient;\r\n        }\r\n\r\n        /* Convert the remainders to the output string */\r\n        var output = \"\";\r\n        for(i = remainders.length - 1;i >= 0;i--)\r\n            output += encoding.charAt(remainders[i]);\r\n\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Encode a string as utf-8.\r\n    * For efficiency, this assumes the input is valid utf-16.\r\n    */\r\n    public str2rstr_utf8(input) {\r\n        var output = \"\";\r\n        var i = -1;\r\n        var x,y;\r\n\r\n        while(++i < input.length) {\r\n            /* Decode utf-16 surrogate pairs */\r\n            x = input.charCodeAt(i);\r\n            y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n            if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\r\n                x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n                i++;\r\n            }\r\n\r\n            /* Encode output as utf-8 */\r\n            if(x <= 0x7F)\r\n                output += String.fromCharCode(x);\r\n            else if(x <= 0x7FF)\r\n                output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),\r\n                    0x80 | (x & 0x3F));\r\n            else if(x <= 0xFFFF)\r\n                output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n                    0x80 | ((x >>> 6) & 0x3F),\r\n                    0x80 | (x & 0x3F));\r\n            else if(x <= 0x1FFFFF)\r\n                output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n                    0x80 | ((x >>> 12) & 0x3F),\r\n                    0x80 | ((x >>> 6) & 0x3F),\r\n                    0x80 | (x & 0x3F));\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Encode a string as utf-16\r\n    */\r\n    public str2rstr_utf16le(input) {\r\n        var output = \"\";\r\n        for(var i = 0;i < input.length;i++)\r\n            output += String.fromCharCode(input.charCodeAt(i) & 0xFF,\r\n                (input.charCodeAt(i) >>> 8) & 0xFF);\r\n        return output;\r\n    }\r\n\r\n    public str2rstr_utf16be(input) {\r\n        var output = \"\";\r\n        for(var i = 0;i < input.length;i++)\r\n            output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n                input.charCodeAt(i) & 0xFF);\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Convert a raw string to an array of little-endian words\r\n    * Characters >255 have their high-byte silently ignored.\r\n    */\r\n    public rstr2binl(input) {\r\n        var output = Array(input.length >> 2);\r\n        for(var i = 0;i < output.length;i++)\r\n            output[i] = 0;\r\n        for(var i = 0;i < input.length * 8;i += 8)\r\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Convert an array of little-endian words to a string\r\n    */\r\n    public binl2rstr(input) {\r\n        var output = \"\";\r\n        for(var i = 0;i < input.length * 32;i += 8)\r\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\r\n        return output;\r\n    }\r\n\r\n    /*\r\n    * Calculate the MD5 of an array of little-endian words, and a bit length.\r\n    */\r\n    public binl_md5(x,len) {\r\n        /* append padding */\r\n        x[len >> 5] |= 0x80 << ((len) % 32);\r\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\r\n\r\n        var a = 1732584193;\r\n        var b = -271733879;\r\n        var c = -1732584194;\r\n        var d = 271733878;\r\n\r\n        for(var i = 0;i < x.length;i += 16) {\r\n            var olda = a;\r\n            var oldb = b;\r\n            var oldc = c;\r\n            var oldd = d;\r\n\r\n            a = this.md5_ff(a,b,c,d,x[i + 0],7,-680876936);\r\n            d = this.md5_ff(d,a,b,c,x[i + 1],12,-389564586);\r\n            c = this.md5_ff(c,d,a,b,x[i + 2],17,606105819);\r\n            b = this.md5_ff(b,c,d,a,x[i + 3],22,-1044525330);\r\n            a = this.md5_ff(a,b,c,d,x[i + 4],7,-176418897);\r\n            d = this.md5_ff(d,a,b,c,x[i + 5],12,1200080426);\r\n            c = this.md5_ff(c,d,a,b,x[i + 6],17,-1473231341);\r\n            b = this.md5_ff(b,c,d,a,x[i + 7],22,-45705983);\r\n            a = this.md5_ff(a,b,c,d,x[i + 8],7,1770035416);\r\n            d = this.md5_ff(d,a,b,c,x[i + 9],12,-1958414417);\r\n            c = this.md5_ff(c,d,a,b,x[i + 10],17,-42063);\r\n            b = this.md5_ff(b,c,d,a,x[i + 11],22,-1990404162);\r\n            a = this.md5_ff(a,b,c,d,x[i + 12],7,1804603682);\r\n            d = this.md5_ff(d,a,b,c,x[i + 13],12,-40341101);\r\n            c = this.md5_ff(c,d,a,b,x[i + 14],17,-1502002290);\r\n            b = this.md5_ff(b,c,d,a,x[i + 15],22,1236535329);\r\n\r\n            a = this.md5_gg(a,b,c,d,x[i + 1],5,-165796510);\r\n            d = this.md5_gg(d,a,b,c,x[i + 6],9,-1069501632);\r\n            c = this.md5_gg(c,d,a,b,x[i + 11],14,643717713);\r\n            b = this.md5_gg(b,c,d,a,x[i + 0],20,-373897302);\r\n            a = this.md5_gg(a,b,c,d,x[i + 5],5,-701558691);\r\n            d = this.md5_gg(d,a,b,c,x[i + 10],9,38016083);\r\n            c = this.md5_gg(c,d,a,b,x[i + 15],14,-660478335);\r\n            b = this.md5_gg(b,c,d,a,x[i + 4],20,-405537848);\r\n            a = this.md5_gg(a,b,c,d,x[i + 9],5,568446438);\r\n            d = this.md5_gg(d,a,b,c,x[i + 14],9,-1019803690);\r\n            c = this.md5_gg(c,d,a,b,x[i + 3],14,-187363961);\r\n            b = this.md5_gg(b,c,d,a,x[i + 8],20,1163531501);\r\n            a = this.md5_gg(a,b,c,d,x[i + 13],5,-1444681467);\r\n            d = this.md5_gg(d,a,b,c,x[i + 2],9,-51403784);\r\n            c = this.md5_gg(c,d,a,b,x[i + 7],14,1735328473);\r\n            b = this.md5_gg(b,c,d,a,x[i + 12],20,-1926607734);\r\n\r\n            a = this.md5_hh(a,b,c,d,x[i + 5],4,-378558);\r\n            d = this.md5_hh(d,a,b,c,x[i + 8],11,-2022574463);\r\n            c = this.md5_hh(c,d,a,b,x[i + 11],16,1839030562);\r\n            b = this.md5_hh(b,c,d,a,x[i + 14],23,-35309556);\r\n            a = this.md5_hh(a,b,c,d,x[i + 1],4,-1530992060);\r\n            d = this.md5_hh(d,a,b,c,x[i + 4],11,1272893353);\r\n            c = this.md5_hh(c,d,a,b,x[i + 7],16,-155497632);\r\n            b = this.md5_hh(b,c,d,a,x[i + 10],23,-1094730640);\r\n            a = this.md5_hh(a,b,c,d,x[i + 13],4,681279174);\r\n            d = this.md5_hh(d,a,b,c,x[i + 0],11,-358537222);\r\n            c = this.md5_hh(c,d,a,b,x[i + 3],16,-722521979);\r\n            b = this.md5_hh(b,c,d,a,x[i + 6],23,76029189);\r\n            a = this.md5_hh(a,b,c,d,x[i + 9],4,-640364487);\r\n            d = this.md5_hh(d,a,b,c,x[i + 12],11,-421815835);\r\n            c = this.md5_hh(c,d,a,b,x[i + 15],16,530742520);\r\n            b = this.md5_hh(b,c,d,a,x[i + 2],23,-995338651);\r\n\r\n            a = this.md5_ii(a,b,c,d,x[i + 0],6,-198630844);\r\n            d = this.md5_ii(d,a,b,c,x[i + 7],10,1126891415);\r\n            c = this.md5_ii(c,d,a,b,x[i + 14],15,-1416354905);\r\n            b = this.md5_ii(b,c,d,a,x[i + 5],21,-57434055);\r\n            a = this.md5_ii(a,b,c,d,x[i + 12],6,1700485571);\r\n            d = this.md5_ii(d,a,b,c,x[i + 3],10,-1894986606);\r\n            c = this.md5_ii(c,d,a,b,x[i + 10],15,-1051523);\r\n            b = this.md5_ii(b,c,d,a,x[i + 1],21,-2054922799);\r\n            a = this.md5_ii(a,b,c,d,x[i + 8],6,1873313359);\r\n            d = this.md5_ii(d,a,b,c,x[i + 15],10,-30611744);\r\n            c = this.md5_ii(c,d,a,b,x[i + 6],15,-1560198380);\r\n            b = this.md5_ii(b,c,d,a,x[i + 13],21,1309151649);\r\n            a = this.md5_ii(a,b,c,d,x[i + 4],6,-145523070);\r\n            d = this.md5_ii(d,a,b,c,x[i + 11],10,-1120210379);\r\n            c = this.md5_ii(c,d,a,b,x[i + 2],15,718787259);\r\n            b = this.md5_ii(b,c,d,a,x[i + 9],21,-343485551);\r\n\r\n            a = this.safe_add(a,olda);\r\n            b = this.safe_add(b,oldb);\r\n            c = this.safe_add(c,oldc);\r\n            d = this.safe_add(d,oldd);\r\n        }\r\n        return [a,b,c,d];\r\n    }\r\n\r\n    /*\r\n    * These privates implement the four basic operations the algorithm uses.\r\n    */\r\n    public md5_cmn(q,a,b,x,s,t) {\r\n        return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(a,q),this.safe_add(x,t)),s),b);\r\n    }\r\n    public md5_ff(a,b,c,d,x,s,t) {\r\n        return this.md5_cmn((b & c) | ((~b) & d),a,b,x,s,t);\r\n    }\r\n    public md5_gg(a,b,c,d,x,s,t) {\r\n        return this.md5_cmn((b & d) | (c & (~d)),a,b,x,s,t);\r\n    }\r\n    public md5_hh(a,b,c,d,x,s,t) {\r\n        return this.md5_cmn(b ^ c ^ d,a,b,x,s,t);\r\n    }\r\n    public md5_ii(a,b,c,d,x,s,t) {\r\n        return this.md5_cmn(c ^ (b | (~d)),a,b,x,s,t);\r\n    }\r\n\r\n    /*\r\n    * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n    * to work around bugs in some JS interpreters.\r\n    */\r\n    public safe_add(x,y) {\r\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n        return (msw << 16) | (lsw & 0xFFFF);\r\n    }\r\n\r\n    /*\r\n    * Bitwise rotate a 32-bit number to the left.\r\n    */\r\n    public bit_rol(num,cnt) {\r\n        return (num << cnt) | (num >>> (32 - cnt));\r\n    }\r\n}\r\n"]}